
stm32_coursework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800366c  0800366c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800366c  0800366c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  080036e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080036e4  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0eb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c2  00000000  00000000  0002b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002cb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b80  00000000  00000000  0002e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd85  00000000  00000000  00045ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a85d  00000000  00000000  00053c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de4ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  000de50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003598 	.word	0x08003598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003598 	.word	0x08003598

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_fdiv>:
 80002b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80002bc:	bf1e      	ittt	ne
 80002be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80002c2:	ea92 0f0c 	teqne	r2, ip
 80002c6:	ea93 0f0c 	teqne	r3, ip
 80002ca:	d069      	beq.n	80003a0 <__aeabi_fdiv+0xec>
 80002cc:	eba2 0203 	sub.w	r2, r2, r3
 80002d0:	ea80 0c01 	eor.w	ip, r0, r1
 80002d4:	0249      	lsls	r1, r1, #9
 80002d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80002da:	d037      	beq.n	800034c <__aeabi_fdiv+0x98>
 80002dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80002e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80002e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80002ec:	428b      	cmp	r3, r1
 80002ee:	bf38      	it	cc
 80002f0:	005b      	lslcc	r3, r3, #1
 80002f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80002f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80002fa:	428b      	cmp	r3, r1
 80002fc:	bf24      	itt	cs
 80002fe:	1a5b      	subcs	r3, r3, r1
 8000300:	ea40 000c 	orrcs.w	r0, r0, ip
 8000304:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000308:	bf24      	itt	cs
 800030a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800030e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000312:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000316:	bf24      	itt	cs
 8000318:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800031c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000320:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000324:	bf24      	itt	cs
 8000326:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800032a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800032e:	011b      	lsls	r3, r3, #4
 8000330:	bf18      	it	ne
 8000332:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000336:	d1e0      	bne.n	80002fa <__aeabi_fdiv+0x46>
 8000338:	2afd      	cmp	r2, #253	; 0xfd
 800033a:	f63f af50 	bhi.w	80001de <__aeabi_fmul+0x92>
 800033e:	428b      	cmp	r3, r1
 8000340:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000350:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000354:	327f      	adds	r2, #127	; 0x7f
 8000356:	bfc2      	ittt	gt
 8000358:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800035c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000360:	4770      	bxgt	lr
 8000362:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000366:	f04f 0300 	mov.w	r3, #0
 800036a:	3a01      	subs	r2, #1
 800036c:	e737      	b.n	80001de <__aeabi_fmul+0x92>
 800036e:	f092 0f00 	teq	r2, #0
 8000372:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000376:	bf02      	ittt	eq
 8000378:	0040      	lsleq	r0, r0, #1
 800037a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800037e:	3a01      	subeq	r2, #1
 8000380:	d0f9      	beq.n	8000376 <__aeabi_fdiv+0xc2>
 8000382:	ea40 000c 	orr.w	r0, r0, ip
 8000386:	f093 0f00 	teq	r3, #0
 800038a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800038e:	bf02      	ittt	eq
 8000390:	0049      	lsleq	r1, r1, #1
 8000392:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000396:	3b01      	subeq	r3, #1
 8000398:	d0f9      	beq.n	800038e <__aeabi_fdiv+0xda>
 800039a:	ea41 010c 	orr.w	r1, r1, ip
 800039e:	e795      	b.n	80002cc <__aeabi_fdiv+0x18>
 80003a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80003a4:	ea92 0f0c 	teq	r2, ip
 80003a8:	d108      	bne.n	80003bc <__aeabi_fdiv+0x108>
 80003aa:	0242      	lsls	r2, r0, #9
 80003ac:	f47f af7d 	bne.w	80002aa <__aeabi_fmul+0x15e>
 80003b0:	ea93 0f0c 	teq	r3, ip
 80003b4:	f47f af70 	bne.w	8000298 <__aeabi_fmul+0x14c>
 80003b8:	4608      	mov	r0, r1
 80003ba:	e776      	b.n	80002aa <__aeabi_fmul+0x15e>
 80003bc:	ea93 0f0c 	teq	r3, ip
 80003c0:	d104      	bne.n	80003cc <__aeabi_fdiv+0x118>
 80003c2:	024b      	lsls	r3, r1, #9
 80003c4:	f43f af4c 	beq.w	8000260 <__aeabi_fmul+0x114>
 80003c8:	4608      	mov	r0, r1
 80003ca:	e76e      	b.n	80002aa <__aeabi_fmul+0x15e>
 80003cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80003d0:	bf18      	it	ne
 80003d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80003d6:	d1ca      	bne.n	800036e <__aeabi_fdiv+0xba>
 80003d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80003dc:	f47f af5c 	bne.w	8000298 <__aeabi_fmul+0x14c>
 80003e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80003e4:	f47f af3c 	bne.w	8000260 <__aeabi_fmul+0x114>
 80003e8:	e75f      	b.n	80002aa <__aeabi_fmul+0x15e>
 80003ea:	bf00      	nop

080003ec <__aeabi_f2iz>:
 80003ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80003f4:	d30f      	bcc.n	8000416 <__aeabi_f2iz+0x2a>
 80003f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80003fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80003fe:	d90d      	bls.n	800041c <__aeabi_f2iz+0x30>
 8000400:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000408:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800040c:	fa23 f002 	lsr.w	r0, r3, r2
 8000410:	bf18      	it	ne
 8000412:	4240      	negne	r0, r0
 8000414:	4770      	bx	lr
 8000416:	f04f 0000 	mov.w	r0, #0
 800041a:	4770      	bx	lr
 800041c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000420:	d101      	bne.n	8000426 <__aeabi_f2iz+0x3a>
 8000422:	0242      	lsls	r2, r0, #9
 8000424:	d105      	bne.n	8000432 <__aeabi_f2iz+0x46>
 8000426:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800042a:	bf08      	it	eq
 800042c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000430:	4770      	bx	lr
 8000432:	f04f 0000 	mov.w	r0, #0
 8000436:	4770      	bx	lr

08000438 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af02      	add	r7, sp, #8
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	f023 030f 	bic.w	r3, r3, #15
 8000448:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	011b      	lsls	r3, r3, #4
 800044e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000450:	7bfb      	ldrb	r3, [r7, #15]
 8000452:	f043 030c 	orr.w	r3, r3, #12
 8000456:	b2db      	uxtb	r3, r3
 8000458:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	f043 0308 	orr.w	r3, r3, #8
 8000460:	b2db      	uxtb	r3, r3
 8000462:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000464:	7bbb      	ldrb	r3, [r7, #14]
 8000466:	f043 030c 	orr.w	r3, r3, #12
 800046a:	b2db      	uxtb	r3, r3
 800046c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	f043 0308 	orr.w	r3, r3, #8
 8000474:	b2db      	uxtb	r3, r3
 8000476:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000478:	f107 0208 	add.w	r2, r7, #8
 800047c:	2364      	movs	r3, #100	; 0x64
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2304      	movs	r3, #4
 8000482:	214e      	movs	r1, #78	; 0x4e
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <lcd_send_cmd+0x5c>)
 8000486:	f001 fa1b 	bl	80018c0 <HAL_I2C_Master_Transmit>
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000008c 	.word	0x2000008c

08000498 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af02      	add	r7, sp, #8
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f023 030f 	bic.w	r3, r3, #15
 80004a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	f043 030d 	orr.w	r3, r3, #13
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	f043 0309 	orr.w	r3, r3, #9
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80004c4:	7bbb      	ldrb	r3, [r7, #14]
 80004c6:	f043 030d 	orr.w	r3, r3, #13
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	f043 0309 	orr.w	r3, r3, #9
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d8:	f107 0208 	add.w	r2, r7, #8
 80004dc:	2364      	movs	r3, #100	; 0x64
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2304      	movs	r3, #4
 80004e2:	214e      	movs	r1, #78	; 0x4e
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <lcd_send_data+0x5c>)
 80004e6:	f001 f9eb 	bl	80018c0 <HAL_I2C_Master_Transmit>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000008c 	.word	0x2000008c

080004f8 <lcd_clear>:

void lcd_clear (void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80004fe:	2080      	movs	r0, #128	; 0x80
 8000500:	f7ff ff9a 	bl	8000438 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000504:	2300      	movs	r3, #0
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	e005      	b.n	8000516 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800050a:	2020      	movs	r0, #32
 800050c:	f7ff ffc4 	bl	8000498 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b45      	cmp	r3, #69	; 0x45
 800051a:	ddf6      	ble.n	800050a <lcd_clear+0x12>
	}
}
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <lcd_put_cur+0x18>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d005      	beq.n	8000548 <lcd_put_cur+0x22>
 800053c:	e009      	b.n	8000552 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	603b      	str	r3, [r7, #0]
            break;
 8000546:	e004      	b.n	8000552 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800054e:	603b      	str	r3, [r7, #0]
            break;
 8000550:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff6e 	bl	8000438 <lcd_send_cmd>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_init>:


void lcd_init (void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f000 fda9 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800056e:	2030      	movs	r0, #48	; 0x30
 8000570:	f7ff ff62 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000574:	2005      	movs	r0, #5
 8000576:	f000 fda3 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800057a:	2030      	movs	r0, #48	; 0x30
 800057c:	f7ff ff5c 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fd9d 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000586:	2030      	movs	r0, #48	; 0x30
 8000588:	f7ff ff56 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f000 fd97 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000592:	2020      	movs	r0, #32
 8000594:	f7ff ff50 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(10);
 8000598:	200a      	movs	r0, #10
 800059a:	f000 fd91 	bl	80010c0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f7ff ff4a 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fd8b 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80005aa:	2008      	movs	r0, #8
 80005ac:	f7ff ff44 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fd85 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff ff3e 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fd7f 	bl	80010c0 <HAL_Delay>
	HAL_Delay(1);
 80005c2:	2001      	movs	r0, #1
 80005c4:	f000 fd7c 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80005c8:	2006      	movs	r0, #6
 80005ca:	f7ff ff35 	bl	8000438 <lcd_send_cmd>
	HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fd76 	bl	80010c0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005d4:	200c      	movs	r0, #12
 80005d6:	f7ff ff2f 	bl	8000438 <lcd_send_cmd>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}

080005de <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005e6:	e006      	b.n	80005f6 <lcd_send_string+0x18>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff51 	bl	8000498 <lcd_send_data>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f4      	bne.n	80005e8 <lcd_send_string+0xa>
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay (uint16_t us)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <delay+0x2c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 800061a:	bf00      	nop
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <delay+0x2c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	429a      	cmp	r2, r3
 8000626:	d3f9      	bcc.n	800061c <delay+0x14>
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	200000e0 	.word	0x200000e0

08000638 <stepper_set_rpm>:

#define stepsperrev 4096

void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	delay(60000000/stepsperrev/rpm);
 8000640:	f643 1238 	movw	r2, #14648	; 0x3938
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	fb92 f3f3 	sdiv	r3, r2, r3
 800064a:	b29b      	uxth	r3, r3
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffdb 	bl	8000608 <delay>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <stepper_half_drive>:

void stepper_half_drive (int step)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	switch (step){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b07      	cmp	r3, #7
 8000668:	f200 80bc 	bhi.w	80007e4 <stepper_half_drive+0x188>
 800066c:	a201      	add	r2, pc, #4	; (adr r2, 8000674 <stepper_half_drive+0x18>)
 800066e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000695 	.word	0x08000695
 8000678:	080006bf 	.word	0x080006bf
 800067c:	080006e9 	.word	0x080006e9
 8000680:	08000713 	.word	0x08000713
 8000684:	0800073d 	.word	0x0800073d
 8000688:	08000767 	.word	0x08000767
 800068c:	08000791 	.word	0x08000791
 8000690:	080007bb 	.word	0x080007bb
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2102      	movs	r1, #2
 8000698:	4854      	ldr	r0, [pc, #336]	; (80007ec <stepper_half_drive+0x190>)
 800069a:	f000 ffb4 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2104      	movs	r1, #4
 80006a2:	4852      	ldr	r0, [pc, #328]	; (80007ec <stepper_half_drive+0x190>)
 80006a4:	f000 ffaf 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2108      	movs	r1, #8
 80006ac:	484f      	ldr	r0, [pc, #316]	; (80007ec <stepper_half_drive+0x190>)
 80006ae:	f000 ffaa 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2110      	movs	r1, #16
 80006b6:	484d      	ldr	r0, [pc, #308]	; (80007ec <stepper_half_drive+0x190>)
 80006b8:	f000 ffa5 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 80006bc:	e092      	b.n	80007e4 <stepper_half_drive+0x188>

		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2102      	movs	r1, #2
 80006c2:	484a      	ldr	r0, [pc, #296]	; (80007ec <stepper_half_drive+0x190>)
 80006c4:	f000 ff9f 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2104      	movs	r1, #4
 80006cc:	4847      	ldr	r0, [pc, #284]	; (80007ec <stepper_half_drive+0x190>)
 80006ce:	f000 ff9a 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2108      	movs	r1, #8
 80006d6:	4845      	ldr	r0, [pc, #276]	; (80007ec <stepper_half_drive+0x190>)
 80006d8:	f000 ff95 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2110      	movs	r1, #16
 80006e0:	4842      	ldr	r0, [pc, #264]	; (80007ec <stepper_half_drive+0x190>)
 80006e2:	f000 ff90 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 80006e6:	e07d      	b.n	80007e4 <stepper_half_drive+0x188>

		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2102      	movs	r1, #2
 80006ec:	483f      	ldr	r0, [pc, #252]	; (80007ec <stepper_half_drive+0x190>)
 80006ee:	f000 ff8a 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2104      	movs	r1, #4
 80006f6:	483d      	ldr	r0, [pc, #244]	; (80007ec <stepper_half_drive+0x190>)
 80006f8:	f000 ff85 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2108      	movs	r1, #8
 8000700:	483a      	ldr	r0, [pc, #232]	; (80007ec <stepper_half_drive+0x190>)
 8000702:	f000 ff80 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	4838      	ldr	r0, [pc, #224]	; (80007ec <stepper_half_drive+0x190>)
 800070c:	f000 ff7b 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 8000710:	e068      	b.n	80007e4 <stepper_half_drive+0x188>

		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2102      	movs	r1, #2
 8000716:	4835      	ldr	r0, [pc, #212]	; (80007ec <stepper_half_drive+0x190>)
 8000718:	f000 ff75 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2104      	movs	r1, #4
 8000720:	4832      	ldr	r0, [pc, #200]	; (80007ec <stepper_half_drive+0x190>)
 8000722:	f000 ff70 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2108      	movs	r1, #8
 800072a:	4830      	ldr	r0, [pc, #192]	; (80007ec <stepper_half_drive+0x190>)
 800072c:	f000 ff6b 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2110      	movs	r1, #16
 8000734:	482d      	ldr	r0, [pc, #180]	; (80007ec <stepper_half_drive+0x190>)
 8000736:	f000 ff66 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 800073a:	e053      	b.n	80007e4 <stepper_half_drive+0x188>

		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2102      	movs	r1, #2
 8000740:	482a      	ldr	r0, [pc, #168]	; (80007ec <stepper_half_drive+0x190>)
 8000742:	f000 ff60 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2104      	movs	r1, #4
 800074a:	4828      	ldr	r0, [pc, #160]	; (80007ec <stepper_half_drive+0x190>)
 800074c:	f000 ff5b 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2108      	movs	r1, #8
 8000754:	4825      	ldr	r0, [pc, #148]	; (80007ec <stepper_half_drive+0x190>)
 8000756:	f000 ff56 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	4823      	ldr	r0, [pc, #140]	; (80007ec <stepper_half_drive+0x190>)
 8000760:	f000 ff51 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 8000764:	e03e      	b.n	80007e4 <stepper_half_drive+0x188>

		case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2102      	movs	r1, #2
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <stepper_half_drive+0x190>)
 800076c:	f000 ff4b 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2104      	movs	r1, #4
 8000774:	481d      	ldr	r0, [pc, #116]	; (80007ec <stepper_half_drive+0x190>)
 8000776:	f000 ff46 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2108      	movs	r1, #8
 800077e:	481b      	ldr	r0, [pc, #108]	; (80007ec <stepper_half_drive+0x190>)
 8000780:	f000 ff41 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <stepper_half_drive+0x190>)
 800078a:	f000 ff3c 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 800078e:	e029      	b.n	80007e4 <stepper_half_drive+0x188>

		case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2102      	movs	r1, #2
 8000794:	4815      	ldr	r0, [pc, #84]	; (80007ec <stepper_half_drive+0x190>)
 8000796:	f000 ff36 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2104      	movs	r1, #4
 800079e:	4813      	ldr	r0, [pc, #76]	; (80007ec <stepper_half_drive+0x190>)
 80007a0:	f000 ff31 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2108      	movs	r1, #8
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <stepper_half_drive+0x190>)
 80007aa:	f000 ff2c 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <stepper_half_drive+0x190>)
 80007b4:	f000 ff27 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 80007b8:	e014      	b.n	80007e4 <stepper_half_drive+0x188>

		case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <stepper_half_drive+0x190>)
 80007c0:	f000 ff21 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2104      	movs	r1, #4
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <stepper_half_drive+0x190>)
 80007ca:	f000 ff1c 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	4806      	ldr	r0, [pc, #24]	; (80007ec <stepper_half_drive+0x190>)
 80007d4:	f000 ff17 	bl	8001606 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <stepper_half_drive+0x190>)
 80007de:	f000 ff12 	bl	8001606 <HAL_GPIO_WritePin>
			break;
 80007e2:	bf00      	nop
		}
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40010800 	.word	0x40010800

080007f0 <stepper_step_angle>:
void stepper_step_angle (float angle, int direction, int rpm)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
	float anglepersequence = 0.703125;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <stepper_step_angle+0x8c>)
 80007fe:	61bb      	str	r3, [r7, #24]
	int numberofsequences = (int) (angle/anglepersequence);
 8000800:	69b9      	ldr	r1, [r7, #24]
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f7ff fd56 	bl	80002b4 <__aeabi_fdiv>
 8000808:	4603      	mov	r3, r0
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fdee 	bl	80003ec <__aeabi_f2iz>
 8000810:	4603      	mov	r3, r0
 8000812:	617b      	str	r3, [r7, #20]

	for (int seq=0; seq<numberofsequences; seq++)
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
 8000818:	e027      	b.n	800086a <stepper_step_angle+0x7a>
	{
		if (direction == 0)
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10f      	bne.n	8000840 <stepper_step_angle+0x50>
		{
			for (int step=7; step>=0; step--)
 8000820:	2307      	movs	r3, #7
 8000822:	623b      	str	r3, [r7, #32]
 8000824:	e008      	b.n	8000838 <stepper_step_angle+0x48>
			{
				stepper_half_drive(step);
 8000826:	6a38      	ldr	r0, [r7, #32]
 8000828:	f7ff ff18 	bl	800065c <stepper_half_drive>
				stepper_set_rpm(rpm);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff03 	bl	8000638 <stepper_set_rpm>
			for (int step=7; step>=0; step--)
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	3b01      	subs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
 800083a:	2b00      	cmp	r3, #0
 800083c:	daf3      	bge.n	8000826 <stepper_step_angle+0x36>
 800083e:	e011      	b.n	8000864 <stepper_step_angle+0x74>
			}
		}

		else if (direction == 1)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10e      	bne.n	8000864 <stepper_step_angle+0x74>
		{
			for (int step=0; step<8; step++)
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	e008      	b.n	800085e <stepper_step_angle+0x6e>
			{
				stepper_half_drive(step);
 800084c:	69f8      	ldr	r0, [r7, #28]
 800084e:	f7ff ff05 	bl	800065c <stepper_half_drive>
				stepper_set_rpm(rpm);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fef0 	bl	8000638 <stepper_set_rpm>
			for (int step=0; step<8; step++)
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	3301      	adds	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	2b07      	cmp	r3, #7
 8000862:	ddf3      	ble.n	800084c <stepper_step_angle+0x5c>
	for (int seq=0; seq<numberofsequences; seq++)
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	3301      	adds	r3, #1
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
 800086a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	429a      	cmp	r2, r3
 8000870:	dbd3      	blt.n	800081a <stepper_step_angle+0x2a>
			}
		}
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	3f340000 	.word	0x3f340000

08000880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fbb9 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f96b 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f000 fa2d 	bl	8000cec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000892:	f000 f9ad 	bl	8000bf0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000896:	f000 f9d9 	bl	8000c4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800089a:	48a6      	ldr	r0, [pc, #664]	; (8000b34 <main+0x2b4>)
 800089c:	f001 ff6c 	bl	8002778 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */
  lcd_init();
 80008a0:	f7ff fe60 	bl	8000564 <lcd_init>
  int BTN1_Left = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  int BTN3_OK = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  int EXPOSTION_TIME = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  int NUMBER_OF_SAMPLES = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  int FIRE = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]

  char EXPOSTION_TIME_str[4];
  char NUMBER_OF_SAMPLES_str[4];

  /* Infinite loop */
  stepper_step_angle(80, 0, 12);
 80008b8:	220c      	movs	r2, #12
 80008ba:	2100      	movs	r1, #0
 80008bc:	489e      	ldr	r0, [pc, #632]	; (8000b38 <main+0x2b8>)
 80008be:	f7ff ff97 	bl	80007f0 <stepper_step_angle>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      /* USER CODE END WHILE */
  	  /* ПЕРЕКЛЮЧЕНИЕ ПО МЕНЮ НАЧАЛО */
  	  if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1 && BTN3_OK == 0) {
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	489d      	ldr	r0, [pc, #628]	; (8000b3c <main+0x2bc>)
 80008c6:	f000 fe87 	bl	80015d8 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d106      	bne.n	80008de <main+0x5e>
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d103      	bne.n	80008de <main+0x5e>
  		  BTN1_Left += 1;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3301      	adds	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
 80008dc:	e00c      	b.n	80008f8 <main+0x78>
  	  }
  	  else if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 1 && BTN3_OK == 0) {
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4896      	ldr	r0, [pc, #600]	; (8000b3c <main+0x2bc>)
 80008e2:	f000 fe79 	bl	80015d8 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d105      	bne.n	80008f8 <main+0x78>
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <main+0x78>
  		  BTN1_Left -= 1;
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
  	  }
  	  /* ПЕРЕКЛЮЧЕНИЕ ПО МЕНЮ КОНЕЦ */
  	  /* КРУГОВОЕ МЕНЮ НАЧАЛО */
  	  if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1 && BTN1_Left == 3) {
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4890      	ldr	r0, [pc, #576]	; (8000b3c <main+0x2bc>)
 80008fc:	f000 fe6c 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d104      	bne.n	8000910 <main+0x90>
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	2b03      	cmp	r3, #3
 800090a:	d101      	bne.n	8000910 <main+0x90>
  		  BTN1_Left = 0; // НАСТРОЙКА ПРАВОЙ ГРАНИЦЫ
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  	  };
  	  if (HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin) == 1 && BTN1_Left == -1) {
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	488a      	ldr	r0, [pc, #552]	; (8000b3c <main+0x2bc>)
 8000914:	f000 fe60 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d105      	bne.n	800092a <main+0xaa>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000924:	d101      	bne.n	800092a <main+0xaa>
  		  BTN1_Left = 1; // НАСТРОЙКА ЛЕВОЙ ГРАНИЦЫ
 8000926:	2301      	movs	r3, #1
 8000928:	61fb      	str	r3, [r7, #28]
  	  };
  	  /* КРУГОВОЕ МЕНЮ КОНЕЦ */

  	  /* ОБРАБОТКА ОК НАЧАЛО */
  	  if (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 1) {
 800092a:	2120      	movs	r1, #32
 800092c:	4883      	ldr	r0, [pc, #524]	; (8000b3c <main+0x2bc>)
 800092e:	f000 fe53 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d102      	bne.n	800093e <main+0xbe>
  	  		  BTN3_OK += 1;
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	3301      	adds	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  	  };
  	  if (HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin) == 1 && BTN3_OK == 2) {
 800093e:	2120      	movs	r1, #32
 8000940:	487e      	ldr	r0, [pc, #504]	; (8000b3c <main+0x2bc>)
 8000942:	f000 fe49 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d104      	bne.n	8000956 <main+0xd6>
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d101      	bne.n	8000956 <main+0xd6>
  	  		  BTN3_OK = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]

  	  /* ИНКРЕМЕНТАЦИЯ НАЧАЛО */


  	  /* ИНКРЕМЕНТАЦИЯ КОНЕЦ */
  	  sprintf(EXPOSTION_TIME_str, "%d", EXPOSTION_TIME);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4978      	ldr	r1, [pc, #480]	; (8000b40 <main+0x2c0>)
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f9a0 	bl	8002ca4 <siprintf>
  	  sprintf(NUMBER_OF_SAMPLES_str, "%d", NUMBER_OF_SAMPLES);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4975      	ldr	r1, [pc, #468]	; (8000b40 <main+0x2c0>)
 800096a:	4618      	mov	r0, r3
 800096c:	f002 f99a 	bl	8002ca4 <siprintf>


  	  /* ЭЛЕМЕНТЫ КРУГОВОГО МЕНЮ НАЧАЛО */
  	  if (BTN1_Left == 0) {
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d131      	bne.n	80009da <main+0x15a>
  		  lcd_put_cur(0, 0);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff fdd4 	bl	8000526 <lcd_put_cur>
  		  lcd_send_string("<- Exposition ->");
 800097e:	4871      	ldr	r0, [pc, #452]	; (8000b44 <main+0x2c4>)
 8000980:	f7ff fe2d 	bl	80005de <lcd_send_string>
  		  lcd_put_cur(1, 8);
 8000984:	2108      	movs	r1, #8
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fdcd 	bl	8000526 <lcd_put_cur>
  		  lcd_send_string(EXPOSTION_TIME_str);
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe24 	bl	80005de <lcd_send_string>
  		  if (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 1 && BTN3_OK == 1 && EXPOSTION_TIME != 9999) {
 8000996:	2110      	movs	r1, #16
 8000998:	4868      	ldr	r0, [pc, #416]	; (8000b3c <main+0x2bc>)
 800099a:	f000 fe1d 	bl	80015d8 <HAL_GPIO_ReadPin>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10a      	bne.n	80009ba <main+0x13a>
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d107      	bne.n	80009ba <main+0x13a>
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d002      	beq.n	80009ba <main+0x13a>
  			  EXPOSTION_TIME += 1;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
  		  };
  		  if (HAL_GPIO_ReadPin(BTN5_GPIO_Port, BTN5_Pin) == 1 && BTN3_OK == 1 && EXPOSTION_TIME != 0) {
 80009ba:	2108      	movs	r1, #8
 80009bc:	485f      	ldr	r0, [pc, #380]	; (8000b3c <main+0x2bc>)
 80009be:	f000 fe0b 	bl	80015d8 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d108      	bne.n	80009da <main+0x15a>
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d105      	bne.n	80009da <main+0x15a>
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <main+0x15a>
  			  EXPOSTION_TIME -= 1;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
  		  };
  	  };

  	  if (BTN1_Left == 1) {
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d130      	bne.n	8000a42 <main+0x1c2>
  		  lcd_put_cur(0, 0);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fd9f 	bl	8000526 <lcd_put_cur>
  		  lcd_send_string("<- N. Samples ->");
 80009e8:	4857      	ldr	r0, [pc, #348]	; (8000b48 <main+0x2c8>)
 80009ea:	f7ff fdf8 	bl	80005de <lcd_send_string>
  		  lcd_put_cur(1, 8);
 80009ee:	2108      	movs	r1, #8
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fd98 	bl	8000526 <lcd_put_cur>
  		  lcd_send_string(NUMBER_OF_SAMPLES_str);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fdf0 	bl	80005de <lcd_send_string>
  		  if (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 1 && BTN3_OK == 1 && NUMBER_OF_SAMPLES != 9999) {
 80009fe:	2110      	movs	r1, #16
 8000a00:	484e      	ldr	r0, [pc, #312]	; (8000b3c <main+0x2bc>)
 8000a02:	f000 fde9 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d10a      	bne.n	8000a22 <main+0x1a2>
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d107      	bne.n	8000a22 <main+0x1a2>
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d002      	beq.n	8000a22 <main+0x1a2>
  			  NUMBER_OF_SAMPLES += 1;
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
  		  };
  		  if (HAL_GPIO_ReadPin(BTN5_GPIO_Port, BTN5_Pin) == 1 && BTN3_OK == 1 && NUMBER_OF_SAMPLES != 0) {
 8000a22:	2108      	movs	r1, #8
 8000a24:	4845      	ldr	r0, [pc, #276]	; (8000b3c <main+0x2bc>)
 8000a26:	f000 fdd7 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <main+0x1c2>
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d105      	bne.n	8000a42 <main+0x1c2>
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d002      	beq.n	8000a42 <main+0x1c2>
  			  NUMBER_OF_SAMPLES -= 1;
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
  		  };
  	  };
  	  if (BTN1_Left == 2) {
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d16f      	bne.n	8000b28 <main+0x2a8>
  		  	  if (BTN3_OK == 0 && FIRE == 0) {
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d11e      	bne.n	8000a8c <main+0x20c>
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d11b      	bne.n	8000a8c <main+0x20c>
  	  		  	  lcd_put_cur(0, 0);
 8000a54:	2100      	movs	r1, #0
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fd65 	bl	8000526 <lcd_put_cur>
  	  		  	  lcd_send_string("<-   FIRE ?   ->");
 8000a5c:	483b      	ldr	r0, [pc, #236]	; (8000b4c <main+0x2cc>)
 8000a5e:	f7ff fdbe 	bl	80005de <lcd_send_string>
  	  		  	  lcd_put_cur(1, 5);
 8000a62:	2105      	movs	r1, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fd5e 	bl	8000526 <lcd_put_cur>
  	  		  	  lcd_send_string("YES");
 8000a6a:	4839      	ldr	r0, [pc, #228]	; (8000b50 <main+0x2d0>)
 8000a6c:	f7ff fdb7 	bl	80005de <lcd_send_string>
  	  		  	  lcd_put_cur(1, 8);
 8000a70:	2108      	movs	r1, #8
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fd57 	bl	8000526 <lcd_put_cur>
  	  		  	  lcd_send_string("/");
 8000a78:	4836      	ldr	r0, [pc, #216]	; (8000b54 <main+0x2d4>)
 8000a7a:	f7ff fdb0 	bl	80005de <lcd_send_string>
  	  		  	  lcd_put_cur(1, 9);
 8000a7e:	2109      	movs	r1, #9
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fd50 	bl	8000526 <lcd_put_cur>
  	  		  	  lcd_send_string("NO");
 8000a86:	4834      	ldr	r0, [pc, #208]	; (8000b58 <main+0x2d8>)
 8000a88:	f7ff fda9 	bl	80005de <lcd_send_string>
  		  	  }
  		  	  if (BTN3_OK == 1) {
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d13d      	bne.n	8000b0e <main+0x28e>
  		  		  if (FIRE == 0) {
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d10e      	bne.n	8000ab6 <main+0x236>
  		  		  	  lcd_put_cur(0, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fd43 	bl	8000526 <lcd_put_cur>
  		  		  	  lcd_send_string("<-   FIRE ?   ->");
 8000aa0:	482a      	ldr	r0, [pc, #168]	; (8000b4c <main+0x2cc>)
 8000aa2:	f7ff fd9c 	bl	80005de <lcd_send_string>
  	  	  		  	  lcd_put_cur(1, 7);
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fd3c 	bl	8000526 <lcd_put_cur>
  	  	  		  	  lcd_send_string("NO");
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <main+0x2d8>)
 8000ab0:	f7ff fd95 	bl	80005de <lcd_send_string>
 8000ab4:	e010      	b.n	8000ad8 <main+0x258>
  		  		  }
  		  		  else if (FIRE == 1) {
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d10d      	bne.n	8000ad8 <main+0x258>
  		  		  	  lcd_put_cur(0, 0);
 8000abc:	2100      	movs	r1, #0
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fd31 	bl	8000526 <lcd_put_cur>
  		  		  	  lcd_send_string("<-   FIRE ?   ->");
 8000ac4:	4821      	ldr	r0, [pc, #132]	; (8000b4c <main+0x2cc>)
 8000ac6:	f7ff fd8a 	bl	80005de <lcd_send_string>
  	  	  		  	  lcd_put_cur(1, 6);
 8000aca:	2106      	movs	r1, #6
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fd2a 	bl	8000526 <lcd_put_cur>
  	  	  		  	  lcd_send_string("YES!");
 8000ad2:	4822      	ldr	r0, [pc, #136]	; (8000b5c <main+0x2dc>)
 8000ad4:	f7ff fd83 	bl	80005de <lcd_send_string>
  		  		  }
  	  		  	  if (HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin) == 1 && FIRE != 1)  {
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4818      	ldr	r0, [pc, #96]	; (8000b3c <main+0x2bc>)
 8000adc:	f000 fd7c 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d106      	bne.n	8000af4 <main+0x274>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d003      	beq.n	8000af4 <main+0x274>
  	  		  		  FIRE += 1;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e00c      	b.n	8000b0e <main+0x28e>
  	  		  	  }
  	  		  	  else if (HAL_GPIO_ReadPin(BTN5_GPIO_Port, BTN5_Pin) == 1 && FIRE != 0) {
 8000af4:	2108      	movs	r1, #8
 8000af6:	4811      	ldr	r0, [pc, #68]	; (8000b3c <main+0x2bc>)
 8000af8:	f000 fd6e 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d105      	bne.n	8000b0e <main+0x28e>
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <main+0x28e>
  	  		  		  FIRE -= 1;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
  	  		  	  }
  		  	  };
		  if (FIRE == 1 && BTN3_OK == 0) {
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d109      	bne.n	8000b28 <main+0x2a8>
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d106      	bne.n	8000b28 <main+0x2a8>
			  lcd_put_cur(0, 0);
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fd02 	bl	8000526 <lcd_put_cur>
			  lcd_send_string("working....");
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <main+0x2e0>)
 8000b24:	f7ff fd5b 	bl	80005de <lcd_send_string>
		  }
  	  };
  	/* ЭЛЕМЕНТЫ КРУГОВОГО МЕНЮ КОНЕЦ */

  	  HAL_Delay(150);
 8000b28:	2096      	movs	r0, #150	; 0x96
 8000b2a:	f000 fac9 	bl	80010c0 <HAL_Delay>
  	  lcd_clear();
 8000b2e:	f7ff fce3 	bl	80004f8 <lcd_clear>
  	  if (HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 1 && BTN3_OK == 0) {
 8000b32:	e6c6      	b.n	80008c2 <main+0x42>
 8000b34:	200000e0 	.word	0x200000e0
 8000b38:	42a00000 	.word	0x42a00000
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	080035b0 	.word	0x080035b0
 8000b44:	080035b4 	.word	0x080035b4
 8000b48:	080035c8 	.word	0x080035c8
 8000b4c:	080035dc 	.word	0x080035dc
 8000b50:	080035f0 	.word	0x080035f0
 8000b54:	080035f4 	.word	0x080035f4
 8000b58:	080035f8 	.word	0x080035f8
 8000b5c:	080035fc 	.word	0x080035fc
 8000b60:	08003604 	.word	0x08003604

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b090      	sub	sp, #64	; 0x40
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	2228      	movs	r2, #40	; 0x28
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 f88e 	bl	8002c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 f98d 	bl	8001ecc <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bb8:	f000 f8f0 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fbfa 	bl	80023d0 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000be2:	f000 f8db 	bl	8000d9c <Error_Handler>
  }
}
 8000be6:	bf00      	nop
 8000be8:	3740      	adds	r7, #64	; 0x40
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_I2C1_Init+0x54>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000bfc:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_I2C1_Init+0x58>)
 8000bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_I2C1_Init+0x50>)
 8000c2e:	f000 fd03 	bl	8001638 <HAL_I2C_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c38:	f000 f8b0 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000008c 	.word	0x2000008c
 8000c44:	40005400 	.word	0x40005400
 8000c48:	000186a0 	.word	0x000186a0

08000c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c70:	2247      	movs	r2, #71	; 0x47
 8000c72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000c96:	f001 fd1f 	bl	80026d8 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f87c 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000cb2:	f001 fdab 	bl	800280c <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000cbc:	f000 f86e 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM1_Init+0x98>)
 8000cce:	f001 ff59 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f000 f860 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200000e0 	.word	0x200000e0
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a1c      	ldr	r2, [pc, #112]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_GPIO_Init+0xa4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	211e      	movs	r1, #30
 8000d4c:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_GPIO_Init+0xa8>)
 8000d4e:	f000 fc5a 	bl	8001606 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000d52:	231e      	movs	r3, #30
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	480a      	ldr	r0, [pc, #40]	; (8000d94 <MX_GPIO_Init+0xa8>)
 8000d6a:	f000 fab1 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN5_Pin BTN4_Pin BTN3_Pin BTN2_Pin
                           BTN1_Pin */
  GPIO_InitStruct.Pin = BTN5_Pin|BTN4_Pin|BTN3_Pin|BTN2_Pin
 8000d6e:	23f8      	movs	r3, #248	; 0xf8
 8000d70:	613b      	str	r3, [r7, #16]
                          |BTN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_GPIO_Init+0xac>)
 8000d82:	f000 faa5 	bl	80012d0 <HAL_GPIO_Init>

}
 8000d86:	bf00      	nop
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010800 	.word	0x40010800
 8000d98:	40010c00 	.word	0x40010c00

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_MspInit+0x5c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <HAL_MspInit+0x5c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_MspInit+0x60>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_MspInit+0x60>)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000

08000e0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_I2C_MspInit+0x90>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d132      	bne.n	8000e92 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_I2C_MspInit+0x94>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <HAL_I2C_MspInit+0x94>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_I2C_MspInit+0x94>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4a:	2312      	movs	r3, #18
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <HAL_I2C_MspInit+0x98>)
 8000e5a:	f000 fa39 	bl	80012d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_I2C_MspInit+0x9c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <HAL_I2C_MspInit+0x9c>)
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_I2C_MspInit+0x94>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0x94>)
 8000e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_I2C_MspInit+0x94>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010c00 	.word	0x40010c00
 8000ea8:	40010000 	.word	0x40010000

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_TIM_Base_MspInit+0x34>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x38>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_TIM_Base_MspInit+0x38>)
 8000ec4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec8:	6193      	str	r3, [r2, #24]
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_TIM_Base_MspInit+0x38>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40012c00 	.word	0x40012c00
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f000 f8ab 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f001 fe6a 	bl	8002c40 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20005000 	.word	0x20005000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	20000140 	.word	0x20000140

08000fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fd6:	f7ff ffe5 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f001 fe37 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff fc4f 	bl	8000880 <main>
  bx lr
 8000fe2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fec:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 8000ff0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff4:	20000140 	.word	0x20000140

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>
	...

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f92b 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fec6 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f935 	bl	80012b6 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f90b 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000008 	.word	0x20000008
 80010a8:	2000012c 	.word	0x2000012c

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	2000012c 	.word	0x2000012c

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff90 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff49 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b08b      	sub	sp, #44	; 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e169      	b.n	80015b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e4:	2201      	movs	r2, #1
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8158 	bne.w	80015b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a9a      	ldr	r2, [pc, #616]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d05e      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800130c:	4a98      	ldr	r2, [pc, #608]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d875      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001312:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d058      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001318:	4a96      	ldr	r2, [pc, #600]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d86f      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800131e:	4a96      	ldr	r2, [pc, #600]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d052      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001324:	4a94      	ldr	r2, [pc, #592]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d869      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800132a:	4a94      	ldr	r2, [pc, #592]	; (800157c <HAL_GPIO_Init+0x2ac>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04c      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001330:	4a92      	ldr	r2, [pc, #584]	; (800157c <HAL_GPIO_Init+0x2ac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d863      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001336:	4a92      	ldr	r2, [pc, #584]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d046      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800133c:	4a90      	ldr	r2, [pc, #576]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d85d      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d82a      	bhi.n	800139c <HAL_GPIO_Init+0xcc>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d859      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <HAL_GPIO_Init+0x80>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	080013cb 	.word	0x080013cb
 8001354:	080013a5 	.word	0x080013a5
 8001358:	080013b7 	.word	0x080013b7
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013ff 	.word	0x080013ff
 8001364:	080013ff 	.word	0x080013ff
 8001368:	080013ff 	.word	0x080013ff
 800136c:	080013ff 	.word	0x080013ff
 8001370:	080013ff 	.word	0x080013ff
 8001374:	080013ff 	.word	0x080013ff
 8001378:	080013ff 	.word	0x080013ff
 800137c:	080013ff 	.word	0x080013ff
 8001380:	080013ff 	.word	0x080013ff
 8001384:	080013ff 	.word	0x080013ff
 8001388:	080013ff 	.word	0x080013ff
 800138c:	080013ff 	.word	0x080013ff
 8001390:	080013ff 	.word	0x080013ff
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013c1 	.word	0x080013c1
 800139c:	4a79      	ldr	r2, [pc, #484]	; (8001584 <HAL_GPIO_Init+0x2b4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a2:	e02c      	b.n	80013fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e029      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	3304      	adds	r3, #4
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e024      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	3308      	adds	r3, #8
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e01f      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	330c      	adds	r3, #12
 80013c6:	623b      	str	r3, [r7, #32]
          break;
 80013c8:	e01a      	b.n	8001400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d2:	2304      	movs	r3, #4
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e013      	b.n	8001400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	611a      	str	r2, [r3, #16]
          break;
 80013ea:	e009      	b.n	8001400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	615a      	str	r2, [r3, #20]
          break;
 80013f6:	e003      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x130>
          break;
 80013fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d801      	bhi.n	800140a <HAL_GPIO_Init+0x13a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e001      	b.n	800140e <HAL_GPIO_Init+0x13e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d802      	bhi.n	800141c <HAL_GPIO_Init+0x14c>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x152>
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3b08      	subs	r3, #8
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	210f      	movs	r1, #15
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80b1 	beq.w	80015b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4c      	ldr	r2, [pc, #304]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2bc>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a40      	ldr	r2, [pc, #256]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <HAL_GPIO_Init+0x2c4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	; (800159c <HAL_GPIO_Init+0x2cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014bc:	2300      	movs	r3, #0
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ce:	492f      	ldr	r1, [pc, #188]	; (800158c <HAL_GPIO_Init+0x2bc>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	492c      	ldr	r1, [pc, #176]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4928      	ldr	r1, [pc, #160]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	491e      	ldr	r1, [pc, #120]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4918      	ldr	r1, [pc, #96]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4914      	ldr	r1, [pc, #80]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e021      	b.n	80015b2 <HAL_GPIO_Init+0x2e2>
 800156e:	bf00      	nop
 8001570:	10320000 	.word	0x10320000
 8001574:	10310000 	.word	0x10310000
 8001578:	10220000 	.word	0x10220000
 800157c:	10210000 	.word	0x10210000
 8001580:	10120000 	.word	0x10120000
 8001584:	10110000 	.word	0x10110000
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40011000 	.word	0x40011000
 800159c:	40011400 	.word	0x40011400
 80015a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f ae8e 	bne.w	80012e4 <HAL_GPIO_Init+0x14>
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	372c      	adds	r7, #44	; 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]
 8001612:	4613      	mov	r3, r2
 8001614:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001616:	787b      	ldrb	r3, [r7, #1]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001622:	e003      	b.n	800162c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	041a      	lsls	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	611a      	str	r2, [r3, #16]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
	...

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e12b      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fbd4 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800169c:	f000 ffea 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <HAL_I2C_Init+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d807      	bhi.n	80016bc <HAL_I2C_Init+0x84>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a80      	ldr	r2, [pc, #512]	; (80018b0 <HAL_I2C_Init+0x278>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e006      	b.n	80016ca <HAL_I2C_Init+0x92>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a7d      	ldr	r2, [pc, #500]	; (80018b4 <HAL_I2C_Init+0x27c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e7      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_I2C_Init+0x280>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_I2C_Init+0x274>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d802      	bhi.n	800170c <HAL_I2C_Init+0xd4>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_I2C_Init+0xe8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a69      	ldr	r2, [pc, #420]	; (80018bc <HAL_I2C_Init+0x284>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	495c      	ldr	r1, [pc, #368]	; (80018ac <HAL_I2C_Init+0x274>)
 800173c:	428b      	cmp	r3, r1
 800173e:	d819      	bhi.n	8001774 <HAL_I2C_Init+0x13c>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fbb1 f3f3 	udiv	r3, r1, r3
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_I2C_Init+0x138>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb1 f3f3 	udiv	r3, r1, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	e051      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001770:	2304      	movs	r3, #4
 8001772:	e04f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <HAL_I2C_Init+0x168>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e012      	b.n	80017c6 <HAL_I2C_Init+0x18e>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x196>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e022      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <HAL_I2C_Init+0x1bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e58      	subs	r0, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	e00f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6911      	ldr	r1, [r2, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68d2      	ldr	r2, [r2, #12]
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	000186a0 	.word	0x000186a0
 80018b0:	001e847f 	.word	0x001e847f
 80018b4:	003d08ff 	.word	0x003d08ff
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	10624dd3 	.word	0x10624dd3

080018c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	4613      	mov	r3, r2
 80018d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fbea 	bl	80010ac <HAL_GetTick>
 80018d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	f040 80e0 	bne.w	8001aa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2319      	movs	r3, #25
 80018ee:	2201      	movs	r2, #1
 80018f0:	4970      	ldr	r1, [pc, #448]	; (8001ab4 <HAL_I2C_Master_Transmit+0x1f4>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f964 	bl	8001bc0 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	e0d3      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x50>
 800190c:	2302      	movs	r3, #2
 800190e:	e0cc      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d007      	beq.n	8001936 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001944:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2221      	movs	r2, #33	; 0x21
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2210      	movs	r2, #16
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	893a      	ldrh	r2, [r7, #8]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f89c 	bl	8001abc <I2C_MasterRequestWrite>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e08d      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019a4:	e066      	b.n	8001a74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f9de 	bl	8001d6c <I2C_WaitOnTXEFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d107      	bne.n	80019ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11b      	bne.n	8001a48 <HAL_I2C_Master_Transmit+0x188>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f9ce 	bl	8001dee <I2C_WaitOnBTFFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d107      	bne.n	8001a70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e01a      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d194      	bne.n	80019a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000

08001abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d006      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae4:	d108      	bne.n	8001af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00b      	b.n	8001b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d107      	bne.n	8001b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f84f 	bl	8001bc0 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b36:	d103      	bne.n	8001b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e035      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b4c:	d108      	bne.n	8001b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b4e:	897b      	ldrh	r3, [r7, #10]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	e01b      	b.n	8001b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b60:	897b      	ldrh	r3, [r7, #10]
 8001b62:	11db      	asrs	r3, r3, #7
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0306 	and.w	r3, r3, #6
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f063 030f 	orn	r3, r3, #15
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <I2C_MasterRequestWrite+0xfc>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f875 	bl	8001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e010      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b8e:	897b      	ldrh	r3, [r7, #10]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4907      	ldr	r1, [pc, #28]	; (8001bbc <I2C_MasterRequestWrite+0x100>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f865 	bl	8001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	00010008 	.word	0x00010008
 8001bbc:	00010002 	.word	0x00010002

08001bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd0:	e025      	b.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d021      	beq.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bda:	f7ff fa67 	bl	80010ac <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d302      	bcc.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d116      	bne.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e023      	b.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10d      	bne.n	8001c44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4013      	ands	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	e00c      	b.n	8001c5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d0b6      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c7c:	e051      	b.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8c:	d123      	bne.n	8001cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ca6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0204 	orr.w	r2, r3, #4
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e046      	b.n	8001d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d021      	beq.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cde:	f7ff f9e5 	bl	80010ac <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d302      	bcc.n	8001cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d116      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0220 	orr.w	r2, r3, #32
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e020      	b.n	8001d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d10c      	bne.n	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4013      	ands	r3, r2
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e00b      	b.n	8001d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d18d      	bne.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d78:	e02d      	b.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f878 	bl	8001e70 <I2C_IsAcknowledgeFailed>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e02d      	b.n	8001de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d021      	beq.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d92:	f7ff f98b 	bl	80010ac <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d302      	bcc.n	8001da8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d116      	bne.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2220      	movs	r2, #32
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e007      	b.n	8001de6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d1ca      	bne.n	8001d7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dfa:	e02d      	b.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f837 	bl	8001e70 <I2C_IsAcknowledgeFailed>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e02d      	b.n	8001e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d021      	beq.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e14:	f7ff f94a 	bl	80010ac <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d302      	bcc.n	8001e2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e007      	b.n	8001e68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d1ca      	bne.n	8001dfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e86:	d11b      	bne.n	8001ec0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f043 0204 	orr.w	r2, r3, #4
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e272      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8087 	beq.w	8001ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eec:	4b92      	ldr	r3, [pc, #584]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d00c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef8:	4b8f      	ldr	r3, [pc, #572]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d112      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5e>
 8001f04:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	4b89      	ldr	r3, [pc, #548]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d06c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x12c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d168      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e24c      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x76>
 8001f34:	4b80      	ldr	r3, [pc, #512]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a7f      	ldr	r2, [pc, #508]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e02e      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x98>
 8001f4a:	4b7b      	ldr	r3, [pc, #492]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7a      	ldr	r2, [pc, #488]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b78      	ldr	r3, [pc, #480]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a77      	ldr	r2, [pc, #476]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0xbc>
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a71      	ldr	r2, [pc, #452]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6e      	ldr	r2, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd4>
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6a      	ldr	r2, [pc, #424]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a67      	ldr	r2, [pc, #412]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f880 	bl	80010ac <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f87c 	bl	80010ac <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e200      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe4>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f86c 	bl	80010ac <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f868 	bl	80010ac <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1ec      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x10c>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d063      	beq.n	80020ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002012:	4b49      	ldr	r3, [pc, #292]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d11c      	bne.n	8002058 <HAL_RCC_OscConfig+0x18c>
 800201e:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x176>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e1c0      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4939      	ldr	r1, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	e03a      	b.n	80020ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d020      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <HAL_RCC_OscConfig+0x270>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002066:	f7ff f821 	bl	80010ac <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206e:	f7ff f81d 	bl	80010ac <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1a1      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4927      	ldr	r1, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_RCC_OscConfig+0x270>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff f800 	bl	80010ac <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe fffc 	bl	80010ac <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e180      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03a      	beq.n	8002150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d019      	beq.n	8002116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7fe ffe0 	bl	80010ac <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7fe ffdc 	bl	80010ac <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e160      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_OscConfig+0x26c>)
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f000 fac4 	bl	800269c <RCC_Delay>
 8002114:	e01c      	b.n	8002150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_RCC_OscConfig+0x274>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe ffc6 	bl	80010ac <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002122:	e00f      	b.n	8002144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7fe ffc2 	bl	80010ac <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d908      	bls.n	8002144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e146      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	42420000 	.word	0x42420000
 8002140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	4b92      	ldr	r3, [pc, #584]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e9      	bne.n	8002124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80a6 	beq.w	80022aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b8b      	ldr	r3, [pc, #556]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b88      	ldr	r3, [pc, #544]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a87      	ldr	r2, [pc, #540]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218a:	4b82      	ldr	r3, [pc, #520]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7e      	ldr	r2, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe ff83 	bl	80010ac <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe ff7f 	bl	80010ac <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b64      	cmp	r3, #100	; 0x64
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e103      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	4b75      	ldr	r3, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x4c8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x312>
 80021d0:	4b6f      	ldr	r3, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a6e      	ldr	r2, [pc, #440]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e02d      	b.n	800223a <HAL_RCC_OscConfig+0x36e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x334>
 80021e6:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a69      	ldr	r2, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	4a66      	ldr	r2, [pc, #408]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	6213      	str	r3, [r2, #32]
 80021fe:	e01c      	b.n	800223a <HAL_RCC_OscConfig+0x36e>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d10c      	bne.n	8002222 <HAL_RCC_OscConfig+0x356>
 8002208:	4b61      	ldr	r3, [pc, #388]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a60      	ldr	r2, [pc, #384]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	4b5e      	ldr	r3, [pc, #376]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4a5d      	ldr	r2, [pc, #372]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6213      	str	r3, [r2, #32]
 8002220:	e00b      	b.n	800223a <HAL_RCC_OscConfig+0x36e>
 8002222:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a5a      	ldr	r2, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6213      	str	r3, [r2, #32]
 800222e:	4b58      	ldr	r3, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a57      	ldr	r2, [pc, #348]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d015      	beq.n	800226e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7fe ff33 	bl	80010ac <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe ff2f 	bl	80010ac <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0b1      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ee      	beq.n	800224a <HAL_RCC_OscConfig+0x37e>
 800226c:	e014      	b.n	8002298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe ff1d 	bl	80010ac <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7fe ff19 	bl	80010ac <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e09b      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ee      	bne.n	8002276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a3b      	ldr	r2, [pc, #236]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8087 	beq.w	80023c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d061      	beq.n	8002384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d146      	bne.n	8002356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c8:	4b33      	ldr	r3, [pc, #204]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe feed 	bl	80010ac <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe fee9 	bl	80010ac <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e06d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f0      	bne.n	80022d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d108      	bne.n	8002310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4921      	ldr	r1, [pc, #132]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a19      	ldr	r1, [r3, #32]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	430b      	orrs	r3, r1
 8002322:	491b      	ldr	r1, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232e:	f7fe febd 	bl	80010ac <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002336:	f7fe feb9 	bl	80010ac <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e03d      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x46a>
 8002354:	e035      	b.n	80023c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_RCC_OscConfig+0x4cc>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fea6 	bl	80010ac <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fea2 	bl	80010ac <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e026      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x498>
 8002382:	e01e      	b.n	80023c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e019      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
 8002390:	40021000 	.word	0x40021000
 8002394:	40007000 	.word	0x40007000
 8002398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <HAL_RCC_OscConfig+0x500>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000

080023d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0d0      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b67      	ldr	r3, [pc, #412]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4965      	ldr	r1, [pc, #404]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800244e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d040      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e073      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249e:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e06b      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ae:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f023 0203 	bic.w	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4936      	ldr	r1, [pc, #216]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c0:	f7fe fdf4 	bl	80010ac <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	e00a      	b.n	80024de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fdf0 	bl	80010ac <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e053      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 020c 	and.w	r2, r3, #12
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1eb      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d210      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	; (8002598 <HAL_RCC_ClockConfig+0x1c8>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_RCC_ClockConfig+0x1cc>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fd52 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000
 8002594:	40021000 	.word	0x40021000
 8002598:	08003620 	.word	0x08003620
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b490      	push	{r4, r7}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <HAL_RCC_GetSysClockFreq+0xac>)
 80025ac:	1d3c      	adds	r4, r7, #4
 80025ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025b4:	f240 2301 	movw	r3, #513	; 0x201
 80025b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d002      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x40>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x46>
 80025e2:	e02b      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025e6:	623b      	str	r3, [r7, #32]
      break;
 80025e8:	e02b      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	0c9b      	lsrs	r3, r3, #18
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3328      	adds	r3, #40	; 0x28
 80025f4:	443b      	add	r3, r7
 80025f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d012      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0c5b      	lsrs	r3, r3, #17
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	3328      	adds	r3, #40	; 0x28
 8002612:	443b      	add	r3, r7
 8002614:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002618:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	4a0e      	ldr	r2, [pc, #56]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800261e:	fb03 f202 	mul.w	r2, r3, r2
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
 800262a:	e004      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	623b      	str	r3, [r7, #32]
      break;
 800263a:	e002      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800263e:	623b      	str	r3, [r7, #32]
      break;
 8002640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002642:	6a3b      	ldr	r3, [r7, #32]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3728      	adds	r7, #40	; 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bc90      	pop	{r4, r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	08003610 	.word	0x08003610
 8002654:	40021000 	.word	0x40021000
 8002658:	007a1200 	.word	0x007a1200
 800265c:	003d0900 	.word	0x003d0900

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <HAL_RCC_GetHCLKFreq+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff2 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08003630 	.word	0x08003630

0800269c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <RCC_Delay+0x34>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <RCC_Delay+0x38>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0a5b      	lsrs	r3, r3, #9
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b8:	bf00      	nop
  }
  while (Delay --);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e5a      	subs	r2, r3, #1
 80026be:	60fa      	str	r2, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f9      	bne.n	80026b8 <RCC_Delay+0x1c>
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	20000000 	.word	0x20000000
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e041      	b.n	800276e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fe fbd4 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4610      	mov	r0, r2
 8002718:	f000 f93c 	bl	8002994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d001      	beq.n	8002790 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e032      	b.n	80027f6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a18      	ldr	r2, [pc, #96]	; (8002800 <HAL_TIM_Base_Start+0x88>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <HAL_TIM_Base_Start+0x48>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027aa:	d009      	beq.n	80027c0 <HAL_TIM_Base_Start+0x48>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_TIM_Base_Start+0x8c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_TIM_Base_Start+0x48>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a13      	ldr	r2, [pc, #76]	; (8002808 <HAL_TIM_Base_Start+0x90>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d111      	bne.n	80027e4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d010      	beq.n	80027f4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e2:	e007      	b.n	80027f4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800

0800280c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIM_ConfigClockSource+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e0b3      	b.n	800298c <HAL_TIM_ConfigClockSource+0x180>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002842:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285c:	d03e      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0xd0>
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	f200 8087 	bhi.w	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	f000 8085 	beq.w	8002978 <HAL_TIM_ConfigClockSource+0x16c>
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d87f      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002874:	2b70      	cmp	r3, #112	; 0x70
 8002876:	d01a      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xa2>
 8002878:	2b70      	cmp	r3, #112	; 0x70
 800287a:	d87b      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 800287c:	2b60      	cmp	r3, #96	; 0x60
 800287e:	d050      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x116>
 8002880:	2b60      	cmp	r3, #96	; 0x60
 8002882:	d877      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002884:	2b50      	cmp	r3, #80	; 0x50
 8002886:	d03c      	beq.n	8002902 <HAL_TIM_ConfigClockSource+0xf6>
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	d873      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d058      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0x136>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d86f      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 8002894:	2b30      	cmp	r3, #48	; 0x30
 8002896:	d064      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
 8002898:	2b30      	cmp	r3, #48	; 0x30
 800289a:	d86b      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 800289c:	2b20      	cmp	r3, #32
 800289e:	d060      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d867      	bhi.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d05c      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d05a      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028ac:	e062      	b.n	8002974 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f000 f942 	bl	8002b46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	609a      	str	r2, [r3, #8]
      break;
 80028da:	e04e      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6899      	ldr	r1, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f000 f92b 	bl	8002b46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028fe:	609a      	str	r2, [r3, #8]
      break;
 8002900:	e03b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	f000 f8a2 	bl	8002a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2150      	movs	r1, #80	; 0x50
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f8f9 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002920:	e02b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6859      	ldr	r1, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f000 f8c0 	bl	8002ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2160      	movs	r1, #96	; 0x60
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f8e9 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002940:	e01b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 f882 	bl	8002a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f8d9 	bl	8002b12 <TIM_ITRx_SetConfig>
      break;
 8002960:	e00b      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f000 f8d0 	bl	8002b12 <TIM_ITRx_SetConfig>
        break;
 8002972:	e002      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002978:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <TIM_Base_SetConfig+0xb8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b2:	d007      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <TIM_Base_SetConfig+0xbc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_Base_SetConfig+0x30>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <TIM_Base_SetConfig+0xc0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d108      	bne.n	80029d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <TIM_Base_SetConfig+0xb8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a19      	ldr	r2, [pc, #100]	; (8002a50 <TIM_Base_SetConfig+0xbc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x62>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a18      	ldr	r2, [pc, #96]	; (8002a54 <TIM_Base_SetConfig+0xc0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <TIM_Base_SetConfig+0xb8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]
}
 8002a42:	bf00      	nop
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	40012c00 	.word	0x40012c00
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800

08002a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f023 0201 	bic.w	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f023 030a 	bic.w	r3, r3, #10
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	f023 0210 	bic.w	r2, r3, #16
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ade:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	621a      	str	r2, [r3, #32]
}
 8002b08:	bf00      	nop
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f043 0307 	orr.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	609a      	str	r2, [r3, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b087      	sub	sp, #28
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	609a      	str	r2, [r3, #8]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e046      	b.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d009      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a10      	ldr	r2, [pc, #64]	; (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10c      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	40000800 	.word	0x40000800

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	f000 fc9c 	bl	8003598 <_init>
 8002c60:	2600      	movs	r6, #0
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	0800366c 	.word	0x0800366c
 8002c88:	0800366c 	.word	0x0800366c
 8002c8c:	0800366c 	.word	0x0800366c
 8002c90:	08003670 	.word	0x08003670

08002c94 <memset>:
 8002c94:	4603      	mov	r3, r0
 8002c96:	4402      	add	r2, r0
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <memset+0xa>
 8002c9c:	4770      	bx	lr
 8002c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca2:	e7f9      	b.n	8002c98 <memset+0x4>

08002ca4 <siprintf>:
 8002ca4:	b40e      	push	{r1, r2, r3}
 8002ca6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002caa:	b500      	push	{lr}
 8002cac:	b09c      	sub	sp, #112	; 0x70
 8002cae:	ab1d      	add	r3, sp, #116	; 0x74
 8002cb0:	9002      	str	r0, [sp, #8]
 8002cb2:	9006      	str	r0, [sp, #24]
 8002cb4:	9107      	str	r1, [sp, #28]
 8002cb6:	9104      	str	r1, [sp, #16]
 8002cb8:	4808      	ldr	r0, [pc, #32]	; (8002cdc <siprintf+0x38>)
 8002cba:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <siprintf+0x3c>)
 8002cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cc0:	9105      	str	r1, [sp, #20]
 8002cc2:	6800      	ldr	r0, [r0, #0]
 8002cc4:	a902      	add	r1, sp, #8
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	f000 f868 	bl	8002d9c <_svfiprintf_r>
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	b01c      	add	sp, #112	; 0x70
 8002cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cd8:	b003      	add	sp, #12
 8002cda:	4770      	bx	lr
 8002cdc:	2000000c 	.word	0x2000000c
 8002ce0:	ffff0208 	.word	0xffff0208

08002ce4 <__ssputs_r>:
 8002ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce8:	688e      	ldr	r6, [r1, #8]
 8002cea:	4682      	mov	sl, r0
 8002cec:	429e      	cmp	r6, r3
 8002cee:	460c      	mov	r4, r1
 8002cf0:	4690      	mov	r8, r2
 8002cf2:	461f      	mov	r7, r3
 8002cf4:	d838      	bhi.n	8002d68 <__ssputs_r+0x84>
 8002cf6:	898a      	ldrh	r2, [r1, #12]
 8002cf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002cfc:	d032      	beq.n	8002d64 <__ssputs_r+0x80>
 8002cfe:	6825      	ldr	r5, [r4, #0]
 8002d00:	6909      	ldr	r1, [r1, #16]
 8002d02:	3301      	adds	r3, #1
 8002d04:	eba5 0901 	sub.w	r9, r5, r1
 8002d08:	6965      	ldr	r5, [r4, #20]
 8002d0a:	444b      	add	r3, r9
 8002d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d14:	106d      	asrs	r5, r5, #1
 8002d16:	429d      	cmp	r5, r3
 8002d18:	bf38      	it	cc
 8002d1a:	461d      	movcc	r5, r3
 8002d1c:	0553      	lsls	r3, r2, #21
 8002d1e:	d531      	bpl.n	8002d84 <__ssputs_r+0xa0>
 8002d20:	4629      	mov	r1, r5
 8002d22:	f000 fb6f 	bl	8003404 <_malloc_r>
 8002d26:	4606      	mov	r6, r0
 8002d28:	b950      	cbnz	r0, 8002d40 <__ssputs_r+0x5c>
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f8ca 3000 	str.w	r3, [sl]
 8002d34:	89a3      	ldrh	r3, [r4, #12]
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	81a3      	strh	r3, [r4, #12]
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	464a      	mov	r2, r9
 8002d42:	6921      	ldr	r1, [r4, #16]
 8002d44:	f000 face 	bl	80032e4 <memcpy>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	6126      	str	r6, [r4, #16]
 8002d56:	444e      	add	r6, r9
 8002d58:	6026      	str	r6, [r4, #0]
 8002d5a:	463e      	mov	r6, r7
 8002d5c:	6165      	str	r5, [r4, #20]
 8002d5e:	eba5 0509 	sub.w	r5, r5, r9
 8002d62:	60a5      	str	r5, [r4, #8]
 8002d64:	42be      	cmp	r6, r7
 8002d66:	d900      	bls.n	8002d6a <__ssputs_r+0x86>
 8002d68:	463e      	mov	r6, r7
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	f000 fac6 	bl	8003300 <memmove>
 8002d74:	68a3      	ldr	r3, [r4, #8]
 8002d76:	2000      	movs	r0, #0
 8002d78:	1b9b      	subs	r3, r3, r6
 8002d7a:	60a3      	str	r3, [r4, #8]
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	4433      	add	r3, r6
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	e7db      	b.n	8002d3c <__ssputs_r+0x58>
 8002d84:	462a      	mov	r2, r5
 8002d86:	f000 fbb1 	bl	80034ec <_realloc_r>
 8002d8a:	4606      	mov	r6, r0
 8002d8c:	2800      	cmp	r0, #0
 8002d8e:	d1e1      	bne.n	8002d54 <__ssputs_r+0x70>
 8002d90:	4650      	mov	r0, sl
 8002d92:	6921      	ldr	r1, [r4, #16]
 8002d94:	f000 face 	bl	8003334 <_free_r>
 8002d98:	e7c7      	b.n	8002d2a <__ssputs_r+0x46>
	...

08002d9c <_svfiprintf_r>:
 8002d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da0:	4698      	mov	r8, r3
 8002da2:	898b      	ldrh	r3, [r1, #12]
 8002da4:	4607      	mov	r7, r0
 8002da6:	061b      	lsls	r3, r3, #24
 8002da8:	460d      	mov	r5, r1
 8002daa:	4614      	mov	r4, r2
 8002dac:	b09d      	sub	sp, #116	; 0x74
 8002dae:	d50e      	bpl.n	8002dce <_svfiprintf_r+0x32>
 8002db0:	690b      	ldr	r3, [r1, #16]
 8002db2:	b963      	cbnz	r3, 8002dce <_svfiprintf_r+0x32>
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	f000 fb25 	bl	8003404 <_malloc_r>
 8002dba:	6028      	str	r0, [r5, #0]
 8002dbc:	6128      	str	r0, [r5, #16]
 8002dbe:	b920      	cbnz	r0, 8002dca <_svfiprintf_r+0x2e>
 8002dc0:	230c      	movs	r3, #12
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	e0d1      	b.n	8002f6e <_svfiprintf_r+0x1d2>
 8002dca:	2340      	movs	r3, #64	; 0x40
 8002dcc:	616b      	str	r3, [r5, #20]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002dd8:	2330      	movs	r3, #48	; 0x30
 8002dda:	f04f 0901 	mov.w	r9, #1
 8002dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8002de2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002f88 <_svfiprintf_r+0x1ec>
 8002de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dea:	4623      	mov	r3, r4
 8002dec:	469a      	mov	sl, r3
 8002dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002df2:	b10a      	cbz	r2, 8002df8 <_svfiprintf_r+0x5c>
 8002df4:	2a25      	cmp	r2, #37	; 0x25
 8002df6:	d1f9      	bne.n	8002dec <_svfiprintf_r+0x50>
 8002df8:	ebba 0b04 	subs.w	fp, sl, r4
 8002dfc:	d00b      	beq.n	8002e16 <_svfiprintf_r+0x7a>
 8002dfe:	465b      	mov	r3, fp
 8002e00:	4622      	mov	r2, r4
 8002e02:	4629      	mov	r1, r5
 8002e04:	4638      	mov	r0, r7
 8002e06:	f7ff ff6d 	bl	8002ce4 <__ssputs_r>
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f000 80aa 	beq.w	8002f64 <_svfiprintf_r+0x1c8>
 8002e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e12:	445a      	add	r2, fp
 8002e14:	9209      	str	r2, [sp, #36]	; 0x24
 8002e16:	f89a 3000 	ldrb.w	r3, [sl]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 80a2 	beq.w	8002f64 <_svfiprintf_r+0x1c8>
 8002e20:	2300      	movs	r3, #0
 8002e22:	f04f 32ff 	mov.w	r2, #4294967295
 8002e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e2a:	f10a 0a01 	add.w	sl, sl, #1
 8002e2e:	9304      	str	r3, [sp, #16]
 8002e30:	9307      	str	r3, [sp, #28]
 8002e32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e36:	931a      	str	r3, [sp, #104]	; 0x68
 8002e38:	4654      	mov	r4, sl
 8002e3a:	2205      	movs	r2, #5
 8002e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e40:	4851      	ldr	r0, [pc, #324]	; (8002f88 <_svfiprintf_r+0x1ec>)
 8002e42:	f000 fa41 	bl	80032c8 <memchr>
 8002e46:	9a04      	ldr	r2, [sp, #16]
 8002e48:	b9d8      	cbnz	r0, 8002e82 <_svfiprintf_r+0xe6>
 8002e4a:	06d0      	lsls	r0, r2, #27
 8002e4c:	bf44      	itt	mi
 8002e4e:	2320      	movmi	r3, #32
 8002e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e54:	0711      	lsls	r1, r2, #28
 8002e56:	bf44      	itt	mi
 8002e58:	232b      	movmi	r3, #43	; 0x2b
 8002e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8002e62:	2b2a      	cmp	r3, #42	; 0x2a
 8002e64:	d015      	beq.n	8002e92 <_svfiprintf_r+0xf6>
 8002e66:	4654      	mov	r4, sl
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f04f 0c0a 	mov.w	ip, #10
 8002e6e:	9a07      	ldr	r2, [sp, #28]
 8002e70:	4621      	mov	r1, r4
 8002e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e76:	3b30      	subs	r3, #48	; 0x30
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d94e      	bls.n	8002f1a <_svfiprintf_r+0x17e>
 8002e7c:	b1b0      	cbz	r0, 8002eac <_svfiprintf_r+0x110>
 8002e7e:	9207      	str	r2, [sp, #28]
 8002e80:	e014      	b.n	8002eac <_svfiprintf_r+0x110>
 8002e82:	eba0 0308 	sub.w	r3, r0, r8
 8002e86:	fa09 f303 	lsl.w	r3, r9, r3
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	46a2      	mov	sl, r4
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	e7d2      	b.n	8002e38 <_svfiprintf_r+0x9c>
 8002e92:	9b03      	ldr	r3, [sp, #12]
 8002e94:	1d19      	adds	r1, r3, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	9103      	str	r1, [sp, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	bfbb      	ittet	lt
 8002e9e:	425b      	neglt	r3, r3
 8002ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8002ea4:	9307      	strge	r3, [sp, #28]
 8002ea6:	9307      	strlt	r3, [sp, #28]
 8002ea8:	bfb8      	it	lt
 8002eaa:	9204      	strlt	r2, [sp, #16]
 8002eac:	7823      	ldrb	r3, [r4, #0]
 8002eae:	2b2e      	cmp	r3, #46	; 0x2e
 8002eb0:	d10c      	bne.n	8002ecc <_svfiprintf_r+0x130>
 8002eb2:	7863      	ldrb	r3, [r4, #1]
 8002eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb6:	d135      	bne.n	8002f24 <_svfiprintf_r+0x188>
 8002eb8:	9b03      	ldr	r3, [sp, #12]
 8002eba:	3402      	adds	r4, #2
 8002ebc:	1d1a      	adds	r2, r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	9203      	str	r2, [sp, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bfb8      	it	lt
 8002ec6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002eca:	9305      	str	r3, [sp, #20]
 8002ecc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002f8c <_svfiprintf_r+0x1f0>
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4650      	mov	r0, sl
 8002ed4:	7821      	ldrb	r1, [r4, #0]
 8002ed6:	f000 f9f7 	bl	80032c8 <memchr>
 8002eda:	b140      	cbz	r0, 8002eee <_svfiprintf_r+0x152>
 8002edc:	2340      	movs	r3, #64	; 0x40
 8002ede:	eba0 000a 	sub.w	r0, r0, sl
 8002ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ee6:	9b04      	ldr	r3, [sp, #16]
 8002ee8:	3401      	adds	r4, #1
 8002eea:	4303      	orrs	r3, r0
 8002eec:	9304      	str	r3, [sp, #16]
 8002eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ef2:	2206      	movs	r2, #6
 8002ef4:	4826      	ldr	r0, [pc, #152]	; (8002f90 <_svfiprintf_r+0x1f4>)
 8002ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002efa:	f000 f9e5 	bl	80032c8 <memchr>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d038      	beq.n	8002f74 <_svfiprintf_r+0x1d8>
 8002f02:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <_svfiprintf_r+0x1f8>)
 8002f04:	bb1b      	cbnz	r3, 8002f4e <_svfiprintf_r+0x1b2>
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	3307      	adds	r3, #7
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	3308      	adds	r3, #8
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f14:	4433      	add	r3, r6
 8002f16:	9309      	str	r3, [sp, #36]	; 0x24
 8002f18:	e767      	b.n	8002dea <_svfiprintf_r+0x4e>
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f22:	e7a5      	b.n	8002e70 <_svfiprintf_r+0xd4>
 8002f24:	2300      	movs	r3, #0
 8002f26:	f04f 0c0a 	mov.w	ip, #10
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	9305      	str	r3, [sp, #20]
 8002f30:	4620      	mov	r0, r4
 8002f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f36:	3a30      	subs	r2, #48	; 0x30
 8002f38:	2a09      	cmp	r2, #9
 8002f3a:	d903      	bls.n	8002f44 <_svfiprintf_r+0x1a8>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0c5      	beq.n	8002ecc <_svfiprintf_r+0x130>
 8002f40:	9105      	str	r1, [sp, #20]
 8002f42:	e7c3      	b.n	8002ecc <_svfiprintf_r+0x130>
 8002f44:	4604      	mov	r4, r0
 8002f46:	2301      	movs	r3, #1
 8002f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f4c:	e7f0      	b.n	8002f30 <_svfiprintf_r+0x194>
 8002f4e:	ab03      	add	r3, sp, #12
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	462a      	mov	r2, r5
 8002f54:	4638      	mov	r0, r7
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <_svfiprintf_r+0x1fc>)
 8002f58:	a904      	add	r1, sp, #16
 8002f5a:	f3af 8000 	nop.w
 8002f5e:	1c42      	adds	r2, r0, #1
 8002f60:	4606      	mov	r6, r0
 8002f62:	d1d6      	bne.n	8002f12 <_svfiprintf_r+0x176>
 8002f64:	89ab      	ldrh	r3, [r5, #12]
 8002f66:	065b      	lsls	r3, r3, #25
 8002f68:	f53f af2c 	bmi.w	8002dc4 <_svfiprintf_r+0x28>
 8002f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f6e:	b01d      	add	sp, #116	; 0x74
 8002f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f74:	ab03      	add	r3, sp, #12
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	462a      	mov	r2, r5
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <_svfiprintf_r+0x1fc>)
 8002f7e:	a904      	add	r1, sp, #16
 8002f80:	f000 f87c 	bl	800307c <_printf_i>
 8002f84:	e7eb      	b.n	8002f5e <_svfiprintf_r+0x1c2>
 8002f86:	bf00      	nop
 8002f88:	08003638 	.word	0x08003638
 8002f8c:	0800363e 	.word	0x0800363e
 8002f90:	08003642 	.word	0x08003642
 8002f94:	00000000 	.word	0x00000000
 8002f98:	08002ce5 	.word	0x08002ce5

08002f9c <_printf_common>:
 8002f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	4616      	mov	r6, r2
 8002fa2:	4699      	mov	r9, r3
 8002fa4:	688a      	ldr	r2, [r1, #8]
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	4607      	mov	r7, r0
 8002faa:	4293      	cmp	r3, r2
 8002fac:	bfb8      	it	lt
 8002fae:	4613      	movlt	r3, r2
 8002fb0:	6033      	str	r3, [r6, #0]
 8002fb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fb6:	460c      	mov	r4, r1
 8002fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fbc:	b10a      	cbz	r2, 8002fc2 <_printf_common+0x26>
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	6033      	str	r3, [r6, #0]
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	0699      	lsls	r1, r3, #26
 8002fc6:	bf42      	ittt	mi
 8002fc8:	6833      	ldrmi	r3, [r6, #0]
 8002fca:	3302      	addmi	r3, #2
 8002fcc:	6033      	strmi	r3, [r6, #0]
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	f015 0506 	ands.w	r5, r5, #6
 8002fd4:	d106      	bne.n	8002fe4 <_printf_common+0x48>
 8002fd6:	f104 0a19 	add.w	sl, r4, #25
 8002fda:	68e3      	ldr	r3, [r4, #12]
 8002fdc:	6832      	ldr	r2, [r6, #0]
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	42ab      	cmp	r3, r5
 8002fe2:	dc28      	bgt.n	8003036 <_printf_common+0x9a>
 8002fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fe8:	1e13      	subs	r3, r2, #0
 8002fea:	6822      	ldr	r2, [r4, #0]
 8002fec:	bf18      	it	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	0692      	lsls	r2, r2, #26
 8002ff2:	d42d      	bmi.n	8003050 <_printf_common+0xb4>
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ffc:	47c0      	blx	r8
 8002ffe:	3001      	adds	r0, #1
 8003000:	d020      	beq.n	8003044 <_printf_common+0xa8>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	68e5      	ldr	r5, [r4, #12]
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf18      	it	ne
 800300e:	2500      	movne	r5, #0
 8003010:	6832      	ldr	r2, [r6, #0]
 8003012:	f04f 0600 	mov.w	r6, #0
 8003016:	68a3      	ldr	r3, [r4, #8]
 8003018:	bf08      	it	eq
 800301a:	1aad      	subeq	r5, r5, r2
 800301c:	6922      	ldr	r2, [r4, #16]
 800301e:	bf08      	it	eq
 8003020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003024:	4293      	cmp	r3, r2
 8003026:	bfc4      	itt	gt
 8003028:	1a9b      	subgt	r3, r3, r2
 800302a:	18ed      	addgt	r5, r5, r3
 800302c:	341a      	adds	r4, #26
 800302e:	42b5      	cmp	r5, r6
 8003030:	d11a      	bne.n	8003068 <_printf_common+0xcc>
 8003032:	2000      	movs	r0, #0
 8003034:	e008      	b.n	8003048 <_printf_common+0xac>
 8003036:	2301      	movs	r3, #1
 8003038:	4652      	mov	r2, sl
 800303a:	4649      	mov	r1, r9
 800303c:	4638      	mov	r0, r7
 800303e:	47c0      	blx	r8
 8003040:	3001      	adds	r0, #1
 8003042:	d103      	bne.n	800304c <_printf_common+0xb0>
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304c:	3501      	adds	r5, #1
 800304e:	e7c4      	b.n	8002fda <_printf_common+0x3e>
 8003050:	2030      	movs	r0, #48	; 0x30
 8003052:	18e1      	adds	r1, r4, r3
 8003054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800305e:	4422      	add	r2, r4
 8003060:	3302      	adds	r3, #2
 8003062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003066:	e7c5      	b.n	8002ff4 <_printf_common+0x58>
 8003068:	2301      	movs	r3, #1
 800306a:	4622      	mov	r2, r4
 800306c:	4649      	mov	r1, r9
 800306e:	4638      	mov	r0, r7
 8003070:	47c0      	blx	r8
 8003072:	3001      	adds	r0, #1
 8003074:	d0e6      	beq.n	8003044 <_printf_common+0xa8>
 8003076:	3601      	adds	r6, #1
 8003078:	e7d9      	b.n	800302e <_printf_common+0x92>
	...

0800307c <_printf_i>:
 800307c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003080:	7e0f      	ldrb	r7, [r1, #24]
 8003082:	4691      	mov	r9, r2
 8003084:	2f78      	cmp	r7, #120	; 0x78
 8003086:	4680      	mov	r8, r0
 8003088:	460c      	mov	r4, r1
 800308a:	469a      	mov	sl, r3
 800308c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800308e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003092:	d807      	bhi.n	80030a4 <_printf_i+0x28>
 8003094:	2f62      	cmp	r7, #98	; 0x62
 8003096:	d80a      	bhi.n	80030ae <_printf_i+0x32>
 8003098:	2f00      	cmp	r7, #0
 800309a:	f000 80d9 	beq.w	8003250 <_printf_i+0x1d4>
 800309e:	2f58      	cmp	r7, #88	; 0x58
 80030a0:	f000 80a4 	beq.w	80031ec <_printf_i+0x170>
 80030a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030ac:	e03a      	b.n	8003124 <_printf_i+0xa8>
 80030ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030b2:	2b15      	cmp	r3, #21
 80030b4:	d8f6      	bhi.n	80030a4 <_printf_i+0x28>
 80030b6:	a101      	add	r1, pc, #4	; (adr r1, 80030bc <_printf_i+0x40>)
 80030b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08003129 	.word	0x08003129
 80030c4:	080030a5 	.word	0x080030a5
 80030c8:	080030a5 	.word	0x080030a5
 80030cc:	080030a5 	.word	0x080030a5
 80030d0:	080030a5 	.word	0x080030a5
 80030d4:	08003129 	.word	0x08003129
 80030d8:	080030a5 	.word	0x080030a5
 80030dc:	080030a5 	.word	0x080030a5
 80030e0:	080030a5 	.word	0x080030a5
 80030e4:	080030a5 	.word	0x080030a5
 80030e8:	08003237 	.word	0x08003237
 80030ec:	08003159 	.word	0x08003159
 80030f0:	08003219 	.word	0x08003219
 80030f4:	080030a5 	.word	0x080030a5
 80030f8:	080030a5 	.word	0x080030a5
 80030fc:	08003259 	.word	0x08003259
 8003100:	080030a5 	.word	0x080030a5
 8003104:	08003159 	.word	0x08003159
 8003108:	080030a5 	.word	0x080030a5
 800310c:	080030a5 	.word	0x080030a5
 8003110:	08003221 	.word	0x08003221
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	602a      	str	r2, [r5, #0]
 800311c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003124:	2301      	movs	r3, #1
 8003126:	e0a4      	b.n	8003272 <_printf_i+0x1f6>
 8003128:	6820      	ldr	r0, [r4, #0]
 800312a:	6829      	ldr	r1, [r5, #0]
 800312c:	0606      	lsls	r6, r0, #24
 800312e:	f101 0304 	add.w	r3, r1, #4
 8003132:	d50a      	bpl.n	800314a <_printf_i+0xce>
 8003134:	680e      	ldr	r6, [r1, #0]
 8003136:	602b      	str	r3, [r5, #0]
 8003138:	2e00      	cmp	r6, #0
 800313a:	da03      	bge.n	8003144 <_printf_i+0xc8>
 800313c:	232d      	movs	r3, #45	; 0x2d
 800313e:	4276      	negs	r6, r6
 8003140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003144:	230a      	movs	r3, #10
 8003146:	485e      	ldr	r0, [pc, #376]	; (80032c0 <_printf_i+0x244>)
 8003148:	e019      	b.n	800317e <_printf_i+0x102>
 800314a:	680e      	ldr	r6, [r1, #0]
 800314c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003150:	602b      	str	r3, [r5, #0]
 8003152:	bf18      	it	ne
 8003154:	b236      	sxthne	r6, r6
 8003156:	e7ef      	b.n	8003138 <_printf_i+0xbc>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	6820      	ldr	r0, [r4, #0]
 800315c:	1d19      	adds	r1, r3, #4
 800315e:	6029      	str	r1, [r5, #0]
 8003160:	0601      	lsls	r1, r0, #24
 8003162:	d501      	bpl.n	8003168 <_printf_i+0xec>
 8003164:	681e      	ldr	r6, [r3, #0]
 8003166:	e002      	b.n	800316e <_printf_i+0xf2>
 8003168:	0646      	lsls	r6, r0, #25
 800316a:	d5fb      	bpl.n	8003164 <_printf_i+0xe8>
 800316c:	881e      	ldrh	r6, [r3, #0]
 800316e:	2f6f      	cmp	r7, #111	; 0x6f
 8003170:	bf0c      	ite	eq
 8003172:	2308      	moveq	r3, #8
 8003174:	230a      	movne	r3, #10
 8003176:	4852      	ldr	r0, [pc, #328]	; (80032c0 <_printf_i+0x244>)
 8003178:	2100      	movs	r1, #0
 800317a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800317e:	6865      	ldr	r5, [r4, #4]
 8003180:	2d00      	cmp	r5, #0
 8003182:	bfa8      	it	ge
 8003184:	6821      	ldrge	r1, [r4, #0]
 8003186:	60a5      	str	r5, [r4, #8]
 8003188:	bfa4      	itt	ge
 800318a:	f021 0104 	bicge.w	r1, r1, #4
 800318e:	6021      	strge	r1, [r4, #0]
 8003190:	b90e      	cbnz	r6, 8003196 <_printf_i+0x11a>
 8003192:	2d00      	cmp	r5, #0
 8003194:	d04d      	beq.n	8003232 <_printf_i+0x1b6>
 8003196:	4615      	mov	r5, r2
 8003198:	fbb6 f1f3 	udiv	r1, r6, r3
 800319c:	fb03 6711 	mls	r7, r3, r1, r6
 80031a0:	5dc7      	ldrb	r7, [r0, r7]
 80031a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80031a6:	4637      	mov	r7, r6
 80031a8:	42bb      	cmp	r3, r7
 80031aa:	460e      	mov	r6, r1
 80031ac:	d9f4      	bls.n	8003198 <_printf_i+0x11c>
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d10b      	bne.n	80031ca <_printf_i+0x14e>
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	07de      	lsls	r6, r3, #31
 80031b6:	d508      	bpl.n	80031ca <_printf_i+0x14e>
 80031b8:	6923      	ldr	r3, [r4, #16]
 80031ba:	6861      	ldr	r1, [r4, #4]
 80031bc:	4299      	cmp	r1, r3
 80031be:	bfde      	ittt	le
 80031c0:	2330      	movle	r3, #48	; 0x30
 80031c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031ca:	1b52      	subs	r2, r2, r5
 80031cc:	6122      	str	r2, [r4, #16]
 80031ce:	464b      	mov	r3, r9
 80031d0:	4621      	mov	r1, r4
 80031d2:	4640      	mov	r0, r8
 80031d4:	f8cd a000 	str.w	sl, [sp]
 80031d8:	aa03      	add	r2, sp, #12
 80031da:	f7ff fedf 	bl	8002f9c <_printf_common>
 80031de:	3001      	adds	r0, #1
 80031e0:	d14c      	bne.n	800327c <_printf_i+0x200>
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	b004      	add	sp, #16
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	4834      	ldr	r0, [pc, #208]	; (80032c0 <_printf_i+0x244>)
 80031ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031f2:	6829      	ldr	r1, [r5, #0]
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80031fa:	6029      	str	r1, [r5, #0]
 80031fc:	061d      	lsls	r5, r3, #24
 80031fe:	d514      	bpl.n	800322a <_printf_i+0x1ae>
 8003200:	07df      	lsls	r7, r3, #31
 8003202:	bf44      	itt	mi
 8003204:	f043 0320 	orrmi.w	r3, r3, #32
 8003208:	6023      	strmi	r3, [r4, #0]
 800320a:	b91e      	cbnz	r6, 8003214 <_printf_i+0x198>
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	f023 0320 	bic.w	r3, r3, #32
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	2310      	movs	r3, #16
 8003216:	e7af      	b.n	8003178 <_printf_i+0xfc>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f043 0320 	orr.w	r3, r3, #32
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	2378      	movs	r3, #120	; 0x78
 8003222:	4828      	ldr	r0, [pc, #160]	; (80032c4 <_printf_i+0x248>)
 8003224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003228:	e7e3      	b.n	80031f2 <_printf_i+0x176>
 800322a:	0659      	lsls	r1, r3, #25
 800322c:	bf48      	it	mi
 800322e:	b2b6      	uxthmi	r6, r6
 8003230:	e7e6      	b.n	8003200 <_printf_i+0x184>
 8003232:	4615      	mov	r5, r2
 8003234:	e7bb      	b.n	80031ae <_printf_i+0x132>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	6826      	ldr	r6, [r4, #0]
 800323a:	1d18      	adds	r0, r3, #4
 800323c:	6961      	ldr	r1, [r4, #20]
 800323e:	6028      	str	r0, [r5, #0]
 8003240:	0635      	lsls	r5, r6, #24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	d501      	bpl.n	800324a <_printf_i+0x1ce>
 8003246:	6019      	str	r1, [r3, #0]
 8003248:	e002      	b.n	8003250 <_printf_i+0x1d4>
 800324a:	0670      	lsls	r0, r6, #25
 800324c:	d5fb      	bpl.n	8003246 <_printf_i+0x1ca>
 800324e:	8019      	strh	r1, [r3, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	4615      	mov	r5, r2
 8003254:	6123      	str	r3, [r4, #16]
 8003256:	e7ba      	b.n	80031ce <_printf_i+0x152>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	2100      	movs	r1, #0
 800325c:	1d1a      	adds	r2, r3, #4
 800325e:	602a      	str	r2, [r5, #0]
 8003260:	681d      	ldr	r5, [r3, #0]
 8003262:	6862      	ldr	r2, [r4, #4]
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f82f 	bl	80032c8 <memchr>
 800326a:	b108      	cbz	r0, 8003270 <_printf_i+0x1f4>
 800326c:	1b40      	subs	r0, r0, r5
 800326e:	6060      	str	r0, [r4, #4]
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	2300      	movs	r3, #0
 8003276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800327a:	e7a8      	b.n	80031ce <_printf_i+0x152>
 800327c:	462a      	mov	r2, r5
 800327e:	4649      	mov	r1, r9
 8003280:	4640      	mov	r0, r8
 8003282:	6923      	ldr	r3, [r4, #16]
 8003284:	47d0      	blx	sl
 8003286:	3001      	adds	r0, #1
 8003288:	d0ab      	beq.n	80031e2 <_printf_i+0x166>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	079b      	lsls	r3, r3, #30
 800328e:	d413      	bmi.n	80032b8 <_printf_i+0x23c>
 8003290:	68e0      	ldr	r0, [r4, #12]
 8003292:	9b03      	ldr	r3, [sp, #12]
 8003294:	4298      	cmp	r0, r3
 8003296:	bfb8      	it	lt
 8003298:	4618      	movlt	r0, r3
 800329a:	e7a4      	b.n	80031e6 <_printf_i+0x16a>
 800329c:	2301      	movs	r3, #1
 800329e:	4632      	mov	r2, r6
 80032a0:	4649      	mov	r1, r9
 80032a2:	4640      	mov	r0, r8
 80032a4:	47d0      	blx	sl
 80032a6:	3001      	adds	r0, #1
 80032a8:	d09b      	beq.n	80031e2 <_printf_i+0x166>
 80032aa:	3501      	adds	r5, #1
 80032ac:	68e3      	ldr	r3, [r4, #12]
 80032ae:	9903      	ldr	r1, [sp, #12]
 80032b0:	1a5b      	subs	r3, r3, r1
 80032b2:	42ab      	cmp	r3, r5
 80032b4:	dcf2      	bgt.n	800329c <_printf_i+0x220>
 80032b6:	e7eb      	b.n	8003290 <_printf_i+0x214>
 80032b8:	2500      	movs	r5, #0
 80032ba:	f104 0619 	add.w	r6, r4, #25
 80032be:	e7f5      	b.n	80032ac <_printf_i+0x230>
 80032c0:	08003649 	.word	0x08003649
 80032c4:	0800365a 	.word	0x0800365a

080032c8 <memchr>:
 80032c8:	4603      	mov	r3, r0
 80032ca:	b510      	push	{r4, lr}
 80032cc:	b2c9      	uxtb	r1, r1
 80032ce:	4402      	add	r2, r0
 80032d0:	4293      	cmp	r3, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	d101      	bne.n	80032da <memchr+0x12>
 80032d6:	2000      	movs	r0, #0
 80032d8:	e003      	b.n	80032e2 <memchr+0x1a>
 80032da:	7804      	ldrb	r4, [r0, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	428c      	cmp	r4, r1
 80032e0:	d1f6      	bne.n	80032d0 <memchr+0x8>
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <memcpy>:
 80032e4:	440a      	add	r2, r1
 80032e6:	4291      	cmp	r1, r2
 80032e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032ec:	d100      	bne.n	80032f0 <memcpy+0xc>
 80032ee:	4770      	bx	lr
 80032f0:	b510      	push	{r4, lr}
 80032f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f6:	4291      	cmp	r1, r2
 80032f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032fc:	d1f9      	bne.n	80032f2 <memcpy+0xe>
 80032fe:	bd10      	pop	{r4, pc}

08003300 <memmove>:
 8003300:	4288      	cmp	r0, r1
 8003302:	b510      	push	{r4, lr}
 8003304:	eb01 0402 	add.w	r4, r1, r2
 8003308:	d902      	bls.n	8003310 <memmove+0x10>
 800330a:	4284      	cmp	r4, r0
 800330c:	4623      	mov	r3, r4
 800330e:	d807      	bhi.n	8003320 <memmove+0x20>
 8003310:	1e43      	subs	r3, r0, #1
 8003312:	42a1      	cmp	r1, r4
 8003314:	d008      	beq.n	8003328 <memmove+0x28>
 8003316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800331a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800331e:	e7f8      	b.n	8003312 <memmove+0x12>
 8003320:	4601      	mov	r1, r0
 8003322:	4402      	add	r2, r0
 8003324:	428a      	cmp	r2, r1
 8003326:	d100      	bne.n	800332a <memmove+0x2a>
 8003328:	bd10      	pop	{r4, pc}
 800332a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800332e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003332:	e7f7      	b.n	8003324 <memmove+0x24>

08003334 <_free_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4605      	mov	r5, r0
 8003338:	2900      	cmp	r1, #0
 800333a:	d040      	beq.n	80033be <_free_r+0x8a>
 800333c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003340:	1f0c      	subs	r4, r1, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfb8      	it	lt
 8003346:	18e4      	addlt	r4, r4, r3
 8003348:	f000 f910 	bl	800356c <__malloc_lock>
 800334c:	4a1c      	ldr	r2, [pc, #112]	; (80033c0 <_free_r+0x8c>)
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	b933      	cbnz	r3, 8003360 <_free_r+0x2c>
 8003352:	6063      	str	r3, [r4, #4]
 8003354:	6014      	str	r4, [r2, #0]
 8003356:	4628      	mov	r0, r5
 8003358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800335c:	f000 b90c 	b.w	8003578 <__malloc_unlock>
 8003360:	42a3      	cmp	r3, r4
 8003362:	d908      	bls.n	8003376 <_free_r+0x42>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	1821      	adds	r1, r4, r0
 8003368:	428b      	cmp	r3, r1
 800336a:	bf01      	itttt	eq
 800336c:	6819      	ldreq	r1, [r3, #0]
 800336e:	685b      	ldreq	r3, [r3, #4]
 8003370:	1809      	addeq	r1, r1, r0
 8003372:	6021      	streq	r1, [r4, #0]
 8003374:	e7ed      	b.n	8003352 <_free_r+0x1e>
 8003376:	461a      	mov	r2, r3
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b10b      	cbz	r3, 8003380 <_free_r+0x4c>
 800337c:	42a3      	cmp	r3, r4
 800337e:	d9fa      	bls.n	8003376 <_free_r+0x42>
 8003380:	6811      	ldr	r1, [r2, #0]
 8003382:	1850      	adds	r0, r2, r1
 8003384:	42a0      	cmp	r0, r4
 8003386:	d10b      	bne.n	80033a0 <_free_r+0x6c>
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	4401      	add	r1, r0
 800338c:	1850      	adds	r0, r2, r1
 800338e:	4283      	cmp	r3, r0
 8003390:	6011      	str	r1, [r2, #0]
 8003392:	d1e0      	bne.n	8003356 <_free_r+0x22>
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4401      	add	r1, r0
 800339a:	6011      	str	r1, [r2, #0]
 800339c:	6053      	str	r3, [r2, #4]
 800339e:	e7da      	b.n	8003356 <_free_r+0x22>
 80033a0:	d902      	bls.n	80033a8 <_free_r+0x74>
 80033a2:	230c      	movs	r3, #12
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	e7d6      	b.n	8003356 <_free_r+0x22>
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	1821      	adds	r1, r4, r0
 80033ac:	428b      	cmp	r3, r1
 80033ae:	bf01      	itttt	eq
 80033b0:	6819      	ldreq	r1, [r3, #0]
 80033b2:	685b      	ldreq	r3, [r3, #4]
 80033b4:	1809      	addeq	r1, r1, r0
 80033b6:	6021      	streq	r1, [r4, #0]
 80033b8:	6063      	str	r3, [r4, #4]
 80033ba:	6054      	str	r4, [r2, #4]
 80033bc:	e7cb      	b.n	8003356 <_free_r+0x22>
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000130 	.word	0x20000130

080033c4 <sbrk_aligned>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	4e0e      	ldr	r6, [pc, #56]	; (8003400 <sbrk_aligned+0x3c>)
 80033c8:	460c      	mov	r4, r1
 80033ca:	6831      	ldr	r1, [r6, #0]
 80033cc:	4605      	mov	r5, r0
 80033ce:	b911      	cbnz	r1, 80033d6 <sbrk_aligned+0x12>
 80033d0:	f000 f8bc 	bl	800354c <_sbrk_r>
 80033d4:	6030      	str	r0, [r6, #0]
 80033d6:	4621      	mov	r1, r4
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 f8b7 	bl	800354c <_sbrk_r>
 80033de:	1c43      	adds	r3, r0, #1
 80033e0:	d00a      	beq.n	80033f8 <sbrk_aligned+0x34>
 80033e2:	1cc4      	adds	r4, r0, #3
 80033e4:	f024 0403 	bic.w	r4, r4, #3
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d007      	beq.n	80033fc <sbrk_aligned+0x38>
 80033ec:	1a21      	subs	r1, r4, r0
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 f8ac 	bl	800354c <_sbrk_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d101      	bne.n	80033fc <sbrk_aligned+0x38>
 80033f8:	f04f 34ff 	mov.w	r4, #4294967295
 80033fc:	4620      	mov	r0, r4
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	20000134 	.word	0x20000134

08003404 <_malloc_r>:
 8003404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003408:	1ccd      	adds	r5, r1, #3
 800340a:	f025 0503 	bic.w	r5, r5, #3
 800340e:	3508      	adds	r5, #8
 8003410:	2d0c      	cmp	r5, #12
 8003412:	bf38      	it	cc
 8003414:	250c      	movcc	r5, #12
 8003416:	2d00      	cmp	r5, #0
 8003418:	4607      	mov	r7, r0
 800341a:	db01      	blt.n	8003420 <_malloc_r+0x1c>
 800341c:	42a9      	cmp	r1, r5
 800341e:	d905      	bls.n	800342c <_malloc_r+0x28>
 8003420:	230c      	movs	r3, #12
 8003422:	2600      	movs	r6, #0
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	4630      	mov	r0, r6
 8003428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800342c:	4e2e      	ldr	r6, [pc, #184]	; (80034e8 <_malloc_r+0xe4>)
 800342e:	f000 f89d 	bl	800356c <__malloc_lock>
 8003432:	6833      	ldr	r3, [r6, #0]
 8003434:	461c      	mov	r4, r3
 8003436:	bb34      	cbnz	r4, 8003486 <_malloc_r+0x82>
 8003438:	4629      	mov	r1, r5
 800343a:	4638      	mov	r0, r7
 800343c:	f7ff ffc2 	bl	80033c4 <sbrk_aligned>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	4604      	mov	r4, r0
 8003444:	d14d      	bne.n	80034e2 <_malloc_r+0xde>
 8003446:	6834      	ldr	r4, [r6, #0]
 8003448:	4626      	mov	r6, r4
 800344a:	2e00      	cmp	r6, #0
 800344c:	d140      	bne.n	80034d0 <_malloc_r+0xcc>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	4631      	mov	r1, r6
 8003452:	4638      	mov	r0, r7
 8003454:	eb04 0803 	add.w	r8, r4, r3
 8003458:	f000 f878 	bl	800354c <_sbrk_r>
 800345c:	4580      	cmp	r8, r0
 800345e:	d13a      	bne.n	80034d6 <_malloc_r+0xd2>
 8003460:	6821      	ldr	r1, [r4, #0]
 8003462:	3503      	adds	r5, #3
 8003464:	1a6d      	subs	r5, r5, r1
 8003466:	f025 0503 	bic.w	r5, r5, #3
 800346a:	3508      	adds	r5, #8
 800346c:	2d0c      	cmp	r5, #12
 800346e:	bf38      	it	cc
 8003470:	250c      	movcc	r5, #12
 8003472:	4638      	mov	r0, r7
 8003474:	4629      	mov	r1, r5
 8003476:	f7ff ffa5 	bl	80033c4 <sbrk_aligned>
 800347a:	3001      	adds	r0, #1
 800347c:	d02b      	beq.n	80034d6 <_malloc_r+0xd2>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	442b      	add	r3, r5
 8003482:	6023      	str	r3, [r4, #0]
 8003484:	e00e      	b.n	80034a4 <_malloc_r+0xa0>
 8003486:	6822      	ldr	r2, [r4, #0]
 8003488:	1b52      	subs	r2, r2, r5
 800348a:	d41e      	bmi.n	80034ca <_malloc_r+0xc6>
 800348c:	2a0b      	cmp	r2, #11
 800348e:	d916      	bls.n	80034be <_malloc_r+0xba>
 8003490:	1961      	adds	r1, r4, r5
 8003492:	42a3      	cmp	r3, r4
 8003494:	6025      	str	r5, [r4, #0]
 8003496:	bf18      	it	ne
 8003498:	6059      	strne	r1, [r3, #4]
 800349a:	6863      	ldr	r3, [r4, #4]
 800349c:	bf08      	it	eq
 800349e:	6031      	streq	r1, [r6, #0]
 80034a0:	5162      	str	r2, [r4, r5]
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	4638      	mov	r0, r7
 80034a6:	f104 060b 	add.w	r6, r4, #11
 80034aa:	f000 f865 	bl	8003578 <__malloc_unlock>
 80034ae:	f026 0607 	bic.w	r6, r6, #7
 80034b2:	1d23      	adds	r3, r4, #4
 80034b4:	1af2      	subs	r2, r6, r3
 80034b6:	d0b6      	beq.n	8003426 <_malloc_r+0x22>
 80034b8:	1b9b      	subs	r3, r3, r6
 80034ba:	50a3      	str	r3, [r4, r2]
 80034bc:	e7b3      	b.n	8003426 <_malloc_r+0x22>
 80034be:	6862      	ldr	r2, [r4, #4]
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	bf0c      	ite	eq
 80034c4:	6032      	streq	r2, [r6, #0]
 80034c6:	605a      	strne	r2, [r3, #4]
 80034c8:	e7ec      	b.n	80034a4 <_malloc_r+0xa0>
 80034ca:	4623      	mov	r3, r4
 80034cc:	6864      	ldr	r4, [r4, #4]
 80034ce:	e7b2      	b.n	8003436 <_malloc_r+0x32>
 80034d0:	4634      	mov	r4, r6
 80034d2:	6876      	ldr	r6, [r6, #4]
 80034d4:	e7b9      	b.n	800344a <_malloc_r+0x46>
 80034d6:	230c      	movs	r3, #12
 80034d8:	4638      	mov	r0, r7
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	f000 f84c 	bl	8003578 <__malloc_unlock>
 80034e0:	e7a1      	b.n	8003426 <_malloc_r+0x22>
 80034e2:	6025      	str	r5, [r4, #0]
 80034e4:	e7de      	b.n	80034a4 <_malloc_r+0xa0>
 80034e6:	bf00      	nop
 80034e8:	20000130 	.word	0x20000130

080034ec <_realloc_r>:
 80034ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f0:	4680      	mov	r8, r0
 80034f2:	4614      	mov	r4, r2
 80034f4:	460e      	mov	r6, r1
 80034f6:	b921      	cbnz	r1, 8003502 <_realloc_r+0x16>
 80034f8:	4611      	mov	r1, r2
 80034fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034fe:	f7ff bf81 	b.w	8003404 <_malloc_r>
 8003502:	b92a      	cbnz	r2, 8003510 <_realloc_r+0x24>
 8003504:	f7ff ff16 	bl	8003334 <_free_r>
 8003508:	4625      	mov	r5, r4
 800350a:	4628      	mov	r0, r5
 800350c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003510:	f000 f838 	bl	8003584 <_malloc_usable_size_r>
 8003514:	4284      	cmp	r4, r0
 8003516:	4607      	mov	r7, r0
 8003518:	d802      	bhi.n	8003520 <_realloc_r+0x34>
 800351a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800351e:	d812      	bhi.n	8003546 <_realloc_r+0x5a>
 8003520:	4621      	mov	r1, r4
 8003522:	4640      	mov	r0, r8
 8003524:	f7ff ff6e 	bl	8003404 <_malloc_r>
 8003528:	4605      	mov	r5, r0
 800352a:	2800      	cmp	r0, #0
 800352c:	d0ed      	beq.n	800350a <_realloc_r+0x1e>
 800352e:	42bc      	cmp	r4, r7
 8003530:	4622      	mov	r2, r4
 8003532:	4631      	mov	r1, r6
 8003534:	bf28      	it	cs
 8003536:	463a      	movcs	r2, r7
 8003538:	f7ff fed4 	bl	80032e4 <memcpy>
 800353c:	4631      	mov	r1, r6
 800353e:	4640      	mov	r0, r8
 8003540:	f7ff fef8 	bl	8003334 <_free_r>
 8003544:	e7e1      	b.n	800350a <_realloc_r+0x1e>
 8003546:	4635      	mov	r5, r6
 8003548:	e7df      	b.n	800350a <_realloc_r+0x1e>
	...

0800354c <_sbrk_r>:
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	2300      	movs	r3, #0
 8003550:	4d05      	ldr	r5, [pc, #20]	; (8003568 <_sbrk_r+0x1c>)
 8003552:	4604      	mov	r4, r0
 8003554:	4608      	mov	r0, r1
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	f7fd fcee 	bl	8000f38 <_sbrk>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_sbrk_r+0x1a>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_sbrk_r+0x1a>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	20000138 	.word	0x20000138

0800356c <__malloc_lock>:
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <__malloc_lock+0x8>)
 800356e:	f000 b811 	b.w	8003594 <__retarget_lock_acquire_recursive>
 8003572:	bf00      	nop
 8003574:	2000013c 	.word	0x2000013c

08003578 <__malloc_unlock>:
 8003578:	4801      	ldr	r0, [pc, #4]	; (8003580 <__malloc_unlock+0x8>)
 800357a:	f000 b80c 	b.w	8003596 <__retarget_lock_release_recursive>
 800357e:	bf00      	nop
 8003580:	2000013c 	.word	0x2000013c

08003584 <_malloc_usable_size_r>:
 8003584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003588:	1f18      	subs	r0, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	bfbc      	itt	lt
 800358e:	580b      	ldrlt	r3, [r1, r0]
 8003590:	18c0      	addlt	r0, r0, r3
 8003592:	4770      	bx	lr

08003594 <__retarget_lock_acquire_recursive>:
 8003594:	4770      	bx	lr

08003596 <__retarget_lock_release_recursive>:
 8003596:	4770      	bx	lr

08003598 <_init>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

080035a4 <_fini>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr
